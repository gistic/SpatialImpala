# Scanning an unpartitioned Parquet table with complex types plans ok.
select s.f1 from functional_parquet.complextypes_fileformat t, t.a
---- PLAN
01:SUBPLAN
|
|--04:NESTED LOOP JOIN [CROSS JOIN]
|  |
|  |--02:SINGULAR ROW SRC
|  |
|  03:UNNEST [t.a]
|
00:SCAN HDFS [functional_parquet.complextypes_fileformat t]
regex:\s+partitions=1/1\s+files=1\s+size=\d+B
====
# Scanning an unpartitioned Avro table with complex types plans ok.
select s.f1 from functional_avro_snap.complextypes_fileformat t, t.a
---- PLAN
01:SUBPLAN
|
|--04:NESTED LOOP JOIN [CROSS JOIN]
|  |
|  |--02:SINGULAR ROW SRC
|  |
|  03:UNNEST [t.a]
|
00:SCAN HDFS [functional_avro_snap.complextypes_fileformat t]
regex:\s+partitions=1/1\s+files=1\s+size=\d+B
====
# Complex types are not supported on text files.
select s.f1 from functional.complextypes_fileformat t, t.a
---- PLAN
not implemented: Scan of table 't' in format 'TEXT' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Complex types are not supported on text files, even if no complex-typed
# columns are selected.
select 1 from functional.complextypes_fileformat
---- PLAN
not implemented: Scan of table 'functional.complextypes_fileformat' in format 'TEXT' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Complex types are not supported on RC files.
select 1 from functional_rc_snap.complextypes_fileformat t, t.a
---- PLAN
not implemented: Scan of table 't' in format 'RC_FILE' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Complex types are not supported on RC files, even if no complex-typed
# columns are selected.
select 1 from functional_rc_snap.complextypes_fileformat
---- PLAN
not implemented: Scan of table 'functional_rc_snap.complextypes_fileformat' in format 'RC_FILE' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Complex types are not supported on sequence files.
select s.f1 from functional_seq_snap.complextypes_fileformat t, t.a
---- PLAN
not implemented: Scan of table 't' in format 'SEQUENCE_FILE' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Complex types are not supported on sequence files, even if no complex-typed
# columns are selected.
select 1 from functional_seq_snap.complextypes_fileformat
---- PLAN
not implemented: Scan of table 'functional_seq_snap.complextypes_fileformat' in format 'SEQUENCE_FILE' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Scanning all partitions fails because one of them is text.
select s.f1 from functional.complextypes_multifileformat t, t.a
---- PLAN
not implemented: Scan of partition 'p=1' in format 'TEXT' of table 't' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Scanning an HBase table with complex-types columns is ok as long as no complex-typed
# columns are selected.
select id from functional_hbase.allcomplextypes
---- PLAN
00:SCAN HBASE [functional_hbase.allcomplextypes]
====
# Scanning an HBase table with complex-types columns fails if a complex-typed
# column is selected.
select id from functional_hbase.allcomplextypes t, t.int_array_col
---- PLAN
not implemented: Scan of table 't.int_array_col' is not supported because 't' references a nested field/collection.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Scanning an HBase table with complex-types columns fails if a complex-typed
# column is selected.
select complex_struct_col.f1 from functional_hbase.allcomplextypes
---- PLAN
not implemented: Scan of table 'functional_hbase.allcomplextypes.complex_struct_col.f1' is not supported because 'functional_hbase.allcomplextypes' references a nested field/collection.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# The complextypes_multifileformat has three partitions with different file formats:
# p=1 text
# p=2 parquet
# p=3 avro
# Scanning a text partition of a multi-format table with complex types fails.
select 1 from functional.complextypes_multifileformat where p = 1
---- PLAN
not implemented: Scan of partition 'p=1' in format 'TEXT' of table 'functional.complextypes_multifileformat' is not supported because the table has a column 's' with a complex type 'STRUCT<f1:STRING,f2:INT>'.
Complex types are supported for these file formats: AVRO, PARQUET.
====
# Scanning a Parquet partition of a multi-format table with complex types plans ok.
select s.f1 from functional.complextypes_multifileformat t, t.a where p = 2
---- PLAN
01:SUBPLAN
|
|--04:NESTED LOOP JOIN [CROSS JOIN]
|  |
|  |--02:SINGULAR ROW SRC
|  |
|  03:UNNEST [t.a]
|
00:SCAN HDFS [functional.complextypes_multifileformat t]
regex:\s+partitions=1/3\s+files=1\s+size=\d+B
====
# Scanning an Avro partition of a multi-format table with complex types plans ok.
select s.f1 from functional.complextypes_multifileformat t, t.a where p = 3
---- PLAN
01:SUBPLAN
|
|--04:NESTED LOOP JOIN [CROSS JOIN]
|  |
|  |--02:SINGULAR ROW SRC
|  |
|  03:UNNEST [t.a]
|
00:SCAN HDFS [functional.complextypes_multifileformat t]
regex:\s+partitions=1/3\s+files=1\s+size=\d+B
====

# Simple query to introduce projection dependencies. Shows resolution
# through inline views, unions, and materialization points.
select * from (
  select tinyint_col + int_col x from functional.alltypes
  union all
  select sum(bigint_col) y from (select bigint_col from functional.alltypes) v1) v2
---- LINEAGE
{
    "queryText":"select * from (\n  select tinyint_col + int_col x from functional.alltypes\n  union all\n  select sum(bigint_col) y from (select bigint_col from functional.alltypes) v1) v2",
    "hash":"25456c60a2e874a20732f42c7af27553",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1,
                2,
                3
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"x"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        }
    ]
}
====
# Simple query to introduce predicate dependencies. Shows conjuncts in WHERE, ON, and
# HAVING clause, as well dependencies introduced by GROUP BY and ORDER BY clauses and
# analytic functions.
select sum(a.tinyint_col) over (partition by a.smallint_col order by a.id),
  count(b.string_col), b.timestamp_col
from functional.alltypes a join functional.alltypessmall b on (a.id = b.id)
where a.year = 2010 and b.float_col > 0
group by a.tinyint_col, a.smallint_col, a.id, b.string_col, b.timestamp_col, b.bigint_col
having count(a.int_col) > 10
order by b.bigint_col limit 10
---- LINEAGE
{
    "queryText":"select sum(a.tinyint_col) over (partition by a.smallint_col order by a.id),\n  count(b.string_col), b.timestamp_col\nfrom functional.alltypes a join functional.alltypessmall b on (a.id = b.id)\nwhere a.year = 2010 and b.float_col > 0\ngroup by a.tinyint_col, a.smallint_col, a.id, b.string_col, b.timestamp_col, b.bigint_col\nhaving count(a.int_col) > 10\norder by b.bigint_col limit 10",
    "hash":"e0309eeff9811f53c82657d62c1e04eb",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                2,
                3
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                2,
                3,
                5,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "targets":[
                0,
                4,
                6
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"sum(a.tinyint_col) OVER(...)"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.smallint_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"count(b.string_col)"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"timestamp_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.timestamp_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bigint_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.year"
        }
    ]
}
====
# CTAS queries
create table t as select int_col, tinyint_col from functional.alltypes
---- LINEAGE
{
    "queryText":"create table t as select int_col, tinyint_col from functional.alltypes",
    "hash":"f7666959b65ce1aa2a695ae90adb7c85",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.t.int_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"default.t.tinyint_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        }
    ]
}
====
create table t as
select distinct a.int_col, a.string_col from functional.alltypes a
inner join functional.alltypessmall b on (a.id = b.id)
where a.year = 2009 and b.month = 2
---- LINEAGE
{
    "queryText":"create table t as\nselect distinct a.int_col, a.string_col from functional.alltypes a\ninner join functional.alltypessmall b on (a.id = b.id)\nwhere a.year = 2009 and b.month = 2",
    "hash":"6d83126f8e34eec31ed4e111e1c32e78",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                4,
                5,
                6,
                7
            ],
            "targets":[
                0,
                2
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.t.int_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"default.t.string_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.string_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.month"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.year"
        }
    ]
}
====
create table t as
select * from
  (select * from
     (select int_col from functional.alltypestiny limit 1) v1 ) v2
---- LINEAGE
{
    "queryText":"create table t as\nselect * from\n  (select * from\n     (select int_col from functional.alltypestiny limit 1) v1 ) v2",
    "hash":"f719f8eba46eda75e9cc560310885558",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.t.int_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.int_col"
        }
    ]
}
====
# CTAS from HBase table
create table tm as select * from functional_hbase.alltypes limit 5
---- LINEAGE
{
    "queryText":"create table tm as select * from functional_hbase.alltypes limit 5",
    "hash":"bedebc5bc72bbc6aec385c514944daae",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                9
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                11
            ],
            "targets":[
                10
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                13
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                15
            ],
            "targets":[
                14
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                17
            ],
            "targets":[
                16
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                19
            ],
            "targets":[
                18
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                21
            ],
            "targets":[
                20
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                23
            ],
            "targets":[
                22
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                25
            ],
            "targets":[
                24
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.id"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.bigint_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.bigint_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.bool_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.bool_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.date_string_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.date_string_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.double_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.double_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.float_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.float_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.int_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.int_col"
        },
        {
            "id":14,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.month"
        },
        {
            "id":15,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.month"
        },
        {
            "id":16,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.smallint_col"
        },
        {
            "id":17,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.smallint_col"
        },
        {
            "id":18,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.string_col"
        },
        {
            "id":19,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.string_col"
        },
        {
            "id":20,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.timestamp_col"
        },
        {
            "id":21,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.timestamp_col"
        },
        {
            "id":22,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.tinyint_col"
        },
        {
            "id":23,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.tinyint_col"
        },
        {
            "id":24,
            "vertexType":"COLUMN",
            "vertexId":"default.tm.year"
        },
        {
            "id":25,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.year"
        }
    ]
}
====
# Insert into an HBase table
insert into
functional_hbase.alltypes
  values (1, 1, true, "1999-12-01", 2.0, 1.0, 1, 12, 2, "abs",
  cast(now() as timestamp), 1, 1999)
---- LINEAGE
{
    "queryText":"insert into\nfunctional_hbase.alltypes\n  values (1, 1, true, \"1999-12-01\", 2.0, 1.0, 1, 12, 2, \"abs\",\n  cast(now() as timestamp), 1, 1999)",
    "hash":"b923425ce9cc2d53d36523ec83971e67",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                1
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                3
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                5
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                10
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.bigint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.bool_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.date_string_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.double_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.float_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.int_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.month"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.smallint_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.string_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.timestamp_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.tinyint_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypes.year"
        }
    ]
}
====
insert into table functional.alltypesnopart (id, bool_col, timestamp_col)
select id, bool_col, timestamp_col
from functional.alltypes
---- LINEAGE
{
    "queryText":"insert into table functional.alltypesnopart (id, bool_col, timestamp_col)\nselect id, bool_col, timestamp_col\nfrom functional.alltypes",
    "hash":"b7b9474fc6b97f104bd031209438ee0e",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                5
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                10
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                13
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.bool_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bool_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.tinyint_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.smallint_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.int_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.bigint_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.float_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.double_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.date_string_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.string_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesnopart.timestamp_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.timestamp_col"
        }
    ]
}
====
insert into table functional.alltypessmall (smallint_col, int_col)
partition (year=2009, month=04)
select smallint_col, int_col
from functional.alltypes
where year=2009 and month=05
---- LINEAGE
{
    "queryText":"insert into table functional.alltypessmall (smallint_col, int_col)\npartition (year=2009, month=04)\nselect smallint_col, int_col\nfrom functional.alltypes\nwhere year=2009 and month=05",
    "hash":"2ed3a6c784e1c0c7fcef226d71375180",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                1
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                3
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                5
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                8
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                10
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                13
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                14
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                16,
                15
            ],
            "targets":[
                0,
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                10,
                11,
                12,
                13,
                14
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.year"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.month"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bool_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.tinyint_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.smallint_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.smallint_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.int_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bigint_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.double_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.date_string_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":14,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.timestamp_col"
        },
        {
            "id":15,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.month"
        },
        {
            "id":16,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.year"
        }
    ]
}
====
insert into table functional.alltypessmall (id, string_col, int_col)
partition (year, month)
select id, string_col, int_col, year, month
from functional_seq_snap.alltypes
where year=2009 and month>10
---- LINEAGE
{
    "queryText":"insert into table functional.alltypessmall (id, string_col, int_col)\npartition (year, month)\nselect id, string_col, int_col, year, month\nfrom functional_seq_snap.alltypes\nwhere year=2009 and month>10",
    "hash":"39ac95ce0632ef1ee8b474be644971f3",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                10
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                13
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                14
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                16
            ],
            "targets":[
                15
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                17
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                0,
                17,
                2,
                4,
                6,
                7,
                8,
                9,
                11,
                12,
                13,
                14,
                15
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.year"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional_seq_snap.alltypes.year"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.month"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional_seq_snap.alltypes.month"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional_seq_snap.alltypes.id"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bool_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.tinyint_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.smallint_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.int_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional_seq_snap.alltypes.int_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bigint_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.double_col"
        },
        {
            "id":14,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.date_string_col"
        },
        {
            "id":15,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":16,
            "vertexType":"COLUMN",
            "vertexId":"functional_seq_snap.alltypes.string_col"
        },
        {
            "id":17,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.timestamp_col"
        }
    ]
}
====
insert into table functional.alltypessmall
partition (year=2009, month)
select min(id), min(bool_col), min(tinyint_col), min(smallint_col), min(int_col),
min(bigint_col), min(float_col), min(double_col), min(date_string_col), min(string_col),
min(timestamp_col), month
from functional.alltypes
where year=2009 and month>10
group by month
having min(id) > 10
---- LINEAGE
{
    "queryText":"insert into table functional.alltypessmall\npartition (year=2009, month)\nselect min(id), min(bool_col), min(tinyint_col), min(smallint_col), min(int_col),\nmin(bigint_col), min(float_col), min(double_col), min(date_string_col), min(string_col),\nmin(timestamp_col), month\nfrom functional.alltypes\nwhere year=2009 and month>10\ngroup by month\nhaving min(id) > 10",
    "hash":"e6969c2cc67e9d6f3f985ddc6431f915",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                2
            ],
            "targets":[
                1
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                4
            ],
            "targets":[
                3
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                5
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                8
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                10
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                12
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                14
            ],
            "targets":[
                13
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                16
            ],
            "targets":[
                15
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                18
            ],
            "targets":[
                17
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                20
            ],
            "targets":[
                19
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                22
            ],
            "targets":[
                21
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                24
            ],
            "targets":[
                23
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                2,
                4,
                25
            ],
            "targets":[
                0,
                17,
                1,
                19,
                3,
                21,
                5,
                23,
                7,
                9,
                11,
                13,
                15
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.year"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.month"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.month"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bool_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bool_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.tinyint_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.smallint_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.smallint_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.int_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bigint_col"
        },
        {
            "id":14,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        },
        {
            "id":15,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":16,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.float_col"
        },
        {
            "id":17,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.double_col"
        },
        {
            "id":18,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.double_col"
        },
        {
            "id":19,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.date_string_col"
        },
        {
            "id":20,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.date_string_col"
        },
        {
            "id":21,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":22,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.string_col"
        },
        {
            "id":23,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.timestamp_col"
        },
        {
            "id":24,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.timestamp_col"
        },
        {
            "id":25,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.year"
        }
    ]
}
====
# Select statements with analytic functions
select
max(tinyint_col) over(partition by int_col)
from functional.alltypes
group by int_col, tinyint_col
---- LINEAGE
{
    "queryText":"select\nmax(tinyint_col) over(partition by int_col)\nfrom functional.alltypes\ngroup by int_col, tinyint_col",
    "hash":"83c78528e6f5325c56a3f3521b08a78d",
    "user":"dev",
    "timestamp":1446159271,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                2
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"max(tinyint_col) OVER(...)"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        }
    ]
}
====
select int_col, rank() over(order by int_col) from functional.alltypesagg
---- LINEAGE
{
    "queryText":"select int_col, rank() over(order by int_col) from functional.alltypesagg",
    "hash":"4f1ecaaed571d2ed9f09f091f399c311",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1
            ],
            "targets":[
                2
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"int_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"rank() OVER(...)"
        }
    ]
}
====
select a.tinyint_col, a.int_col, count(a.double_col)
  over(partition by a.tinyint_col order by a.int_col desc rows between 1 preceding and 1 following)
from functional.alltypes a inner join functional.alltypessmall b on a.id = b.id
order by a.tinyint_col, a.int_col
---- LINEAGE
{
    "queryText":"select a.tinyint_col, a.int_col, count(a.double_col)\n  over(partition by a.tinyint_col order by a.int_col desc rows between 1 preceding and 1 following)\nfrom functional.alltypes a inner join functional.alltypessmall b on a.id = b.id\norder by a.tinyint_col, a.int_col",
    "hash":"b6e26c00b2ef17f0592ebadb0ecc21f6",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                4
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                6,
                7
            ],
            "targets":[
                0,
                2,
                4
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"tinyint_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"int_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"count(a.double_col) OVER(...)"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.double_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        }
    ]
}
====
with v2 as
  (select
   double_col,
   count(int_col) over() a,
   sum(int_col + bigint_col) over(partition by bool_col) b
   from
     (select * from functional.alltypes) v1)
select double_col, a, b, a + b, double_col + a from v2
order by 2, 3, 4
---- LINEAGE
{
    "queryText":"with v2 as\n  (select\n   double_col,\n   count(int_col) over() a,\n   sum(int_col + bigint_col) over(partition by bool_col) b\n   from\n     (select * from functional.alltypes) v1)\nselect double_col, a, b, a + b, double_col + a from v2\norder by 2, 3, 4",
    "hash":"6bf993cea0d1ab9e613674ef178916c9",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3,
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                4
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                3,
                5
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                7
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"double_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.double_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"a"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"b"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bool_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"a + b"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"double_col + a"
        }
    ]
}
====
select double_col, a, b, a + b, double_col + a from
  (select
   double_col,
   count(int_col) over() a,
   sum(int_col + bigint_col) over(partition by bool_col) b
   from
     (select * from functional.alltypes) v1) v2
order by 2, 3, 4
---- LINEAGE
{
    "queryText":"select double_col, a, b, a + b, double_col + a from\n  (select\n   double_col,\n   count(int_col) over() a,\n   sum(int_col + bigint_col) over(partition by bool_col) b\n   from\n     (select * from functional.alltypes) v1) v2\norder by 2, 3, 4",
    "hash":"811403c86e86fe630dea7bd0a6c89273",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3,
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                4
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                3,
                5
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                7
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"double_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.double_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"a"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"b"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bool_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"a + b"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"double_col + a"
        }
    ]
}
====
# Union statements
select a.month, a.year, b.int_col, b.month
from
  (select year, month from functional.alltypes
   union all
   select year, month from functional.alltypes) a
  inner join
  functional.alltypessmall b
  on (a.month = b.month)
where b.month = 1
---- LINEAGE
{
    "queryText":"select a.month, a.year, b.int_col, b.month\nfrom\n  (select year, month from functional.alltypes\n   union all\n   select year, month from functional.alltypes) a\n  inner join\n  functional.alltypessmall b\n  on (a.month = b.month)\nwhere b.month = 1",
    "hash":"e3000cd5edf2a02e1f5407810f3cc09a",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                6
            ],
            "targets":[
                0,
                2,
                4
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"month"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.month"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"year"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.year"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"int_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.int_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.month"
        }
    ]
}
====
# Select statements with inline views
select t1.int_col, t2.month, t2.int_col + 1
from (
  select int_col, count(*)
  from functional.alltypessmall
  where month = 1
  group by int_col
  having count(*) > 1
  order by count(*) desc limit 5
  ) t1
join functional.alltypes t2 on (t1.int_col = t2.int_col)
where month = 1
---- LINEAGE
{
    "queryText":"select t1.int_col, t2.month, t2.int_col + 1\nfrom (\n  select int_col, count(*)\n  from functional.alltypessmall\n  where month = 1\n  group by int_col\n  having count(*) > 1\n  order by count(*) desc limit 5\n  ) t1\njoin functional.alltypes t2 on (t1.int_col = t2.int_col)\nwhere month = 1",
    "hash":"3f1ecf7239e205342aee4979e7cb4877",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3,
                5,
                6
            ],
            "targets":[
                0,
                2,
                4
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"int_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"month"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.month"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"t2.int_col + 1"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.month"
        }
    ]
}
====
select x.smallint_col, x.id, x.tinyint_col, c.id, x.int_col, x.float_col, c.string_col
from functional.alltypessmall c
join (
   select a.smallint_col smallint_col, a.tinyint_col tinyint_col, a.day day,
           a.int_col int_col, a.month month, b.float_col float_col, b.id id
   from ( select * from functional.alltypesagg a where month=1 ) a
   join functional.alltypessmall b on (a.smallint_col = b.id)
 ) x on (x.tinyint_col = c.id)
where x.day=1
and x.int_col > 899
and x.float_col > 4.5
and c.string_col < '7'
and x.int_col + x.float_col + cast(c.string_col as float) < 1000
---- LINEAGE
{
    "queryText":"select x.smallint_col, x.id, x.tinyint_col, c.id, x.int_col, x.float_col, c.string_col\nfrom functional.alltypessmall c\njoin (\n   select a.smallint_col smallint_col, a.tinyint_col tinyint_col, a.day day,\n           a.int_col int_col, a.month month, b.float_col float_col, b.id id\n   from ( select * from functional.alltypesagg a where month=1 ) a\n   join functional.alltypessmall b on (a.smallint_col = b.id)\n ) x on (x.tinyint_col = c.id)\nwhere x.day=1\nand x.int_col > 899\nand x.float_col > 4.5\nand c.string_col < '7'\nand x.int_col + x.float_col + cast(c.string_col as float) < 1000",
    "hash":"4edf165aed5982ede63f7c91074f4b44",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                9
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                11
            ],
            "targets":[
                10
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3,
                5,
                7,
                9,
                11,
                12,
                13
            ],
            "targets":[
                0,
                2,
                4,
                6,
                8,
                10
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"smallint_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.smallint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"id"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"tinyint_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.tinyint_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"int_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.int_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"float_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"string_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.month"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.day"
        }
    ]
}
====
select c1, c2, c3
from
  (select c1, c2, c3
   from
     (select int_col c1, sum(float_col) c2, min(float_col) c3
      from functional_hbase.alltypessmall
      group by 1) x
    order by 2,3 desc
    limit 5
) y
---- LINEAGE
{
    "queryText":"select c1, c2, c3\nfrom\n  (select c1, c2, c3\n   from\n     (select int_col c1, sum(float_col) c2, min(float_col) c3\n      from functional_hbase.alltypessmall\n      group by 1) x\n    order by 2,3 desc\n    limit 5\n) y",
    "hash":"8b4d1ab11721d9ebdf26666d4195eb18",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                0,
                2,
                4
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"c1"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypessmall.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"c2"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypessmall.float_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"c3"
        }
    ]
}
====
select c1, x2
from (
  select c1, min(c2) x2
  from (
    select c1, c2, c3
    from (
      select int_col c1, tinyint_col c2, min(float_col) c3
      from functional_hbase.alltypessmall
      group by 1, 2
      order by 1,2
      limit 1
    ) x
  ) x2
  group by c1
) y
order by 2,1 desc
limit 0
---- LINEAGE
{
    "queryText":"select c1, x2\nfrom (\n  select c1, min(c2) x2\n  from (\n    select c1, c2, c3\n    from (\n      select int_col c1, tinyint_col c2, min(float_col) c3\n      from functional_hbase.alltypessmall\n      group by 1, 2\n      order by 1,2\n      limit 1\n    ) x\n  ) x2\n  group by c1\n) y\norder by 2,1 desc\nlimit 0",
    "hash":"50d3b4f249f038b0711ea75c17640fc9",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                0,
                2
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"c1"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypessmall.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"x2"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypessmall.tinyint_col"
        }
    ]
}
====
# Views
select int_col, string_col from functional.view_view
---- LINEAGE
{
    "queryText":"select int_col, string_col from functional.view_view",
    "hash":"9073496459077de1332e5017977dedf5",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"int_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"string_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.string_col"
        }
    ]
}
====
select t.id from (select id from functional.alltypes_view) t
where t.id < 10
---- LINEAGE
{
    "queryText":"select t.id from (select id from functional.alltypes_view) t\nwhere t.id < 10",
    "hash":"8ba7998033f90e1e358f4fdc7ea4251b",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        }
    ]
}
====
# Subqueries
select string_col, float_col, bool_col
from functional.alltypes
where id in
  (select id from functional.alltypesagg)
---- LINEAGE
{
    "queryText":"select string_col, float_col, bool_col\nfrom functional.alltypes\nwhere id in\n  (select id from functional.alltypesagg)",
    "hash":"e8ad1371d2a13e1ee9ec45689b62cdc9",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                6,
                7
            ],
            "targets":[
                0,
                2,
                4
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"string_col"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.string_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"float_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.float_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"bool_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bool_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.id"
        }
    ]
}
====
select 1
from functional.alltypesagg a
where exists
  (select id, count(int_col) over (partition by bool_col)
   from functional.alltypestiny b
   where a.tinyint_col = b.tinyint_col
   group by id, int_col, bool_col)
and tinyint_col < 10
---- LINEAGE
{
    "queryText":"select 1\nfrom functional.alltypesagg a\nwhere exists\n  (select id, count(int_col) over (partition by bool_col)\n   from functional.alltypestiny b\n   where a.tinyint_col = b.tinyint_col\n   group by id, int_col, bool_col)\nand tinyint_col < 10",
    "hash":"a7500c022d29c583c31b287868a848bf",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                2
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"1"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.tinyint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.tinyint_col"
        }
    ]
}
====
select int_col + 1, tinyint_col - 1
from functional.alltypes a
where a.int_col <
  (select max(int_col) from functional.alltypesagg g where g.bool_col = true)
and a.bigint_col > 10
---- LINEAGE
{
    "queryText":"select int_col + 1, tinyint_col - 1\nfrom functional.alltypes a\nwhere a.int_col <\n  (select max(int_col) from functional.alltypesagg g where g.bool_col = true)\nand a.bigint_col > 10",
    "hash":"5e6227f323793ea4441e2a3119af2f09",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                4,
                5,
                6
            ],
            "targets":[
                0,
                2
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"int_col + 1"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"tinyint_col - 1"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.int_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.bool_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        }
    ]
}
====
# With clause
with t as (select int_col x, bigint_col y from functional.alltypes) select x, y from t
---- LINEAGE
{
    "queryText":"with t as (select int_col x, bigint_col y from functional.alltypes) select x, y from t",
    "hash":"a7ab58d90540f28a8dfd69703632ad7a",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"x"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"y"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        }
    ]
}
====
with t1 as (select * from functional.alltypestiny)
insert into functional.alltypesinsert (id, int_col, string_col) partition(year, month)
select id, int_col, string_col, year, month from t1
---- LINEAGE
{
    "queryText":"with t1 as (select * from functional.alltypestiny)\ninsert into functional.alltypesinsert (id, int_col, string_col) partition(year, month)\nselect id, int_col, string_col, year, month from t1",
    "hash":"0bc5b3e66cc72387f74893b1f1934946",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                10
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                13
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                14
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                16
            ],
            "targets":[
                15
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
            ],
            "targets":[
                17
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.year"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.year"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.month"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.month"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.id"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.id"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.bool_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.tinyint_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.smallint_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.int_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.int_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.bigint_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.float_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.double_col"
        },
        {
            "id":14,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.date_string_col"
        },
        {
            "id":15,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.string_col"
        },
        {
            "id":16,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.string_col"
        },
        {
            "id":17,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesinsert.timestamp_col"
        }
    ]
}
====
# Nested analytic functions
select lead(a) over (partition by b order by c)
from
  (select lead(id) over (partition by int_col order by bigint_col) as a,
   max(id) over (partition by tinyint_col order by int_col) as b,
   min(int_col) over (partition by string_col order by bool_col) as c
   from functional.alltypes) v
---- LINEAGE
{
    "queryText":"select lead(a) over (partition by b order by c)\nfrom\n  (select lead(id) over (partition by int_col order by bigint_col) as a,\n   max(id) over (partition by tinyint_col order by int_col) as b,\n   min(int_col) over (partition by string_col order by bool_col) as c\n   from functional.alltypes) v",
    "hash":"aa95e5e6f39fc80bb3c318a2515dc77d",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"lead(a, 1, NULL) OVER(...)"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bigint_col"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.string_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.bool_col"
        }
    ]
}
====
# Create view statement (CDH-26149)
create view test_view_lineage as select id from functional.alltypestiny
---- LINEAGE
{
    "queryText":"create view test_view_lineage as select id from functional.alltypestiny",
    "hash":"ff6b1ecb265afe4f03355a07238cfe37",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.id"
        }
    ]
}
====
# Create view with nested inline views (CDH-26149)
create view test_view_lineage (a, b) as select c1, x2
from (
  select c1, min(c2) x2
  from (
    select c1, c2, c3
    from (
      select int_col c1, tinyint_col c2, min(float_col) c3
      from functional_hbase.alltypessmall
      group by 1, 2
      order by 1,2
      limit 1
    ) x
  ) x2
  group by c1
) y
order by 2,1 desc
limit 0
---- LINEAGE
{
    "queryText":"create view test_view_lineage (a, b) as select c1, x2\nfrom (\n  select c1, min(c2) x2\n  from (\n    select c1, c2, c3\n    from (\n      select int_col c1, tinyint_col c2, min(float_col) c3\n      from functional_hbase.alltypessmall\n      group by 1, 2\n      order by 1,2\n      limit 1\n    ) x\n  ) x2\n  group by c1\n) y\norder by 2,1 desc\nlimit 0",
    "hash":"b96adf892b897da1e562c5be98724fb5",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3
            ],
            "targets":[
                0,
                2
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypessmall.int_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.b"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional_hbase.alltypessmall.tinyint_col"
        }
    ]
}
====
# Create view with complex select statement (CDH-26149)
create view test_view_lineage (a1, a2, a3, a4, a5, a6, a7) as
  select x.smallint_col, x.id, x.tinyint_col, c.id, x.int_col, x.float_col, c.string_col
  from functional.alltypessmall c
  join (
     select a.smallint_col smallint_col, a.tinyint_col tinyint_col, a.day day,
           a.int_col int_col, a.month month, b.float_col float_col, b.id id
     from ( select * from functional.alltypesagg a where month=1 ) a
     join functional.alltypessmall b on (a.smallint_col = b.id)
   ) x on (x.tinyint_col = c.id)
  where x.day=1
  and x.int_col > 899
  and x.float_col > 4.5
  and c.string_col < '7'
  and x.int_col + x.float_col + cast(c.string_col as float) < 1000
---- LINEAGE
{
    "queryText":"create view test_view_lineage (a1, a2, a3, a4, a5, a6, a7) as\n  select x.smallint_col, x.id, x.tinyint_col, c.id, x.int_col, x.float_col, c.string_col\n  from functional.alltypessmall c\n  join (\n     select a.smallint_col smallint_col, a.tinyint_col tinyint_col, a.day day,\n           a.int_col int_col, a.month month, b.float_col float_col, b.id id\n     from ( select * from functional.alltypesagg a where month=1 ) a\n     join functional.alltypessmall b on (a.smallint_col = b.id)\n   ) x on (x.tinyint_col = c.id)\n  where x.day=1\n  and x.int_col > 899\n  and x.float_col > 4.5\n  and c.string_col < '7'\n  and x.int_col + x.float_col + cast(c.string_col as float) < 1000",
    "hash":"ffbe643df8f26e92907fb45de1aeda36",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                8
            ],
            "targets":[
                7
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                10
            ],
            "targets":[
                9
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                12
            ],
            "targets":[
                11
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                3,
                5,
                8,
                10,
                12,
                13,
                14
            ],
            "targets":[
                0,
                2,
                4,
                6,
                7,
                9,
                11
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a1"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.smallint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a2"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a3"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.tinyint_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a4"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a5"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.int_col"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a6"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.a7"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.month"
        },
        {
            "id":14,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypesagg.day"
        }
    ]
}
====
# Create view with select statement containing an analytic function (CDH-26149)
create view test_view_lineage as
  select * from (
    select sum(a.tinyint_col) over (partition by a.smallint_col order by a.id),
      count(b.string_col), b.timestamp_col
    from functional.alltypes a join functional.alltypessmall b on (a.id = b.id)
    where a.year = 2010 and b.float_col > 0
    group by a.tinyint_col, a.smallint_col, a.id, b.string_col, b.timestamp_col, b.bigint_col
    having count(a.int_col) > 10
    order by b.bigint_col limit 10) t
---- LINEAGE
{
    "queryText":"create view test_view_lineage as\n  select * from (\n    select sum(a.tinyint_col) over (partition by a.smallint_col order by a.id),\n      count(b.string_col), b.timestamp_col\n    from functional.alltypes a join functional.alltypessmall b on (a.id = b.id)\n    where a.year = 2010 and b.float_col > 0\n    group by a.tinyint_col, a.smallint_col, a.id, b.string_col, b.timestamp_col, b.bigint_col\n    having count(a.int_col) > 10\n    order by b.bigint_col limit 10) t",
    "hash":"d4b9e2d63548088f911816b2ae29d7c2",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                2,
                3
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                2,
                3,
                5,
                7,
                8,
                9,
                10,
                11,
                12
            ],
            "targets":[
                0,
                4,
                6
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage._c0"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.tinyint_col"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.id"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.smallint_col"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage._c1"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.string_col"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"default.test_view_lineage.timestamp_col"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.timestamp_col"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.id"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.float_col"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.int_col"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypessmall.bigint_col"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes.year"
        }
    ]
}
====
# Alter view statement (CDH-26149)
alter view functional.alltypes_view as select id from functional.alltypestiny
---- LINEAGE
{
    "queryText":"alter view functional.alltypes_view as select id from functional.alltypestiny",
    "hash":"8c9367afc562a4c04d2d40e1276646c2",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypes_view.id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.alltypestiny.id"
        }
    ]
}
====
# Test references to struct fields.
select * from (
  select int_struct_col.f1 + int_struct_col.f2 x from functional.allcomplextypes
  where year = 2000
  order by nested_struct_col.f2.f12.f21 limit 10
  union all
  select sum(f1) y from
    (select complex_struct_col.f1 f1 from functional.allcomplextypes
     group by 1) v1) v2
---- LINEAGE
{
    "queryText":"select * from (\n  select int_struct_col.f1 + int_struct_col.f2 x from functional.allcomplextypes\n  where year = 2000\n  order by nested_struct_col.f2.f12.f21 limit 10\n  union all\n  select sum(f1) y from\n    (select complex_struct_col.f1 f1 from functional.allcomplextypes\n     group by 1) v1) v2",
    "hash":"4fb3ceddbf596097335af607d528f5a7",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1,
                2,
                3
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                4,
                5
            ],
            "targets":[
                0
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"x"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.complex_struct_col.f1"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.int_struct_col.f2"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.int_struct_col.f1"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.nested_struct_col.f2.f12.f21"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.year"
        }
    ]
}
====
# Test absolute collection table refs. Ensure that the vertex ids of sources are
# always an absolute explicit path.
select * from functional.allcomplextypes.int_array_col a inner join
  functional.allcomplextypes.struct_map_col m on (a.item = m.f1)
---- LINEAGE
{
    "queryText":"select * from functional.allcomplextypes.int_array_col a inner join\n  functional.allcomplextypes.struct_map_col m on (a.item = m.f1)",
    "hash":"8c0c64f8a4c08b82ad343ab439101957",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                1,
                5
            ],
            "targets":[
                0,
                2,
                4,
                6
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"item"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.int_array_col.item"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"key"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.key"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"f1"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.value.f1"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"f2"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.value.f2"
        }
    ]
}
====
# Test relative collection table refs. Ensure that the vertex ids of sources are
# always an absolute explicit path.
select * from functional.allcomplextypes t, t.int_array_col a, t.struct_map_col m
  where a.item = m.f1
---- LINEAGE
{
    "queryText":"select * from functional.allcomplextypes t, t.int_array_col a, t.struct_map_col m\n  where a.item = m.f1",
    "hash":"1b0db371b32e90d33629ed7779332cf7",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                3
            ],
            "targets":[
                2
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                4
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                9
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                11
            ],
            "targets":[
                10
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                13
            ],
            "targets":[
                12
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                7,
                11
            ],
            "targets":[
                0,
                2,
                4,
                6,
                8,
                10,
                12
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"id"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.id"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"year"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.year"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"month"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.month"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"item"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.int_array_col.item"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"key"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.key"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"f1"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.value.f1"
        },
        {
            "id":12,
            "vertexType":"COLUMN",
            "vertexId":"f2"
        },
        {
            "id":13,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.value.f2"
        }
    ]
}
====
# Test relative collection table refs in inline views.
select a + b as ab, c, d, e from functional.allcomplextypes t,
  (select sum(item) a from t.int_array_col
   where item < 10) v1,
  (select count(f1) b from t.struct_map_col
   group by key) v2,
  (select avg(value) over(partition by key) c from t.map_map_col.value) v3,
  (select item d from t.int_array_col
   union all
   select value from t.int_map_col) v4,
  (select f21 e from t.complex_nested_struct_col.f2.f12 order by key limit 10) v5
---- LINEAGE
{
    "queryText":"select a + b as ab, c, d, e from functional.allcomplextypes t,\n  (select sum(item) a from t.int_array_col\n   where item < 10) v1,\n  (select count(f1) b from t.struct_map_col\n   group by key) v2,\n  (select avg(value) over(partition by key) c from t.map_map_col.value) v3,\n  (select item d from t.int_array_col\n   union all\n   select value from t.int_map_col) v4,\n  (select f21 e from t.complex_nested_struct_col.f2.f12 order by key limit 10) v5",
    "hash":"4affc0d1e384475d1ff2fc2e19643064",
    "user":"dev",
    "timestamp":1446159272,
    "edges":[
        {
            "sources":[
                1,
                2
            ],
            "targets":[
                0
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                4
            ],
            "targets":[
                3
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                5
            ],
            "targets":[
                3
            ],
            "edgeType":"PREDICATE"
        },
        {
            "sources":[
                2,
                7
            ],
            "targets":[
                6
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                9
            ],
            "targets":[
                8
            ],
            "edgeType":"PROJECTION"
        },
        {
            "sources":[
                2,
                10,
                11
            ],
            "targets":[
                0,
                3,
                6,
                8
            ],
            "edgeType":"PREDICATE"
        }
    ],
    "vertices":[
        {
            "id":0,
            "vertexType":"COLUMN",
            "vertexId":"ab"
        },
        {
            "id":1,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.value.f1"
        },
        {
            "id":2,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.int_array_col.item"
        },
        {
            "id":3,
            "vertexType":"COLUMN",
            "vertexId":"c"
        },
        {
            "id":4,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.map_map_col.value.value"
        },
        {
            "id":5,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.map_map_col.value.key"
        },
        {
            "id":6,
            "vertexType":"COLUMN",
            "vertexId":"d"
        },
        {
            "id":7,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.int_map_col.value"
        },
        {
            "id":8,
            "vertexType":"COLUMN",
            "vertexId":"e"
        },
        {
            "id":9,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.complex_nested_struct_col.f2.item.f12.value.f21"
        },
        {
            "id":10,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.complex_nested_struct_col.f2.item.f12.key"
        },
        {
            "id":11,
            "vertexType":"COLUMN",
            "vertexId":"functional.allcomplextypes.struct_map_col.key"
        }
    ]
}
====

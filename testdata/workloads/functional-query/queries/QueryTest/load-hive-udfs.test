====
---- QUERY
drop function if exists udf_test.hive_pi();
drop function if exists udf_test.hive_round(double);
drop function if exists udf_test.hive_floor(double);
drop function if exists udf_test.hive_mod(int, int);
drop function if exists udf_test.hive_bin(bigint);
drop function if exists udf_test.hive_lower(string);

drop function if exists udf_test.identity(boolean);
drop function if exists udf_test.identity(tinyint);
drop function if exists udf_test.identity(smallint);
drop function if exists udf_test.identity(int);
drop function if exists udf_test.identity(bigint);
drop function if exists udf_test.identity(float);
drop function if exists udf_test.identity(double);
drop function if exists udf_test.identity(string);
drop function if exists udf_test.identity(string, string);
drop function if exists udf_test.identity(string, string, string);
drop function if exists udf_test.identity(timestamp);

drop function if exists udf_test.throws_exception();

create database if not exists udf_test
location '$FILESYSTEM_PREFIX/test-warehouse/udf_test.db';

create function udf_test.hive_pi() returns double
location '$FILESYSTEM_PREFIX/test-warehouse/hive-exec.jar'
symbol='org.apache.hadoop.hive.ql.udf.UDFPI';

create function udf_test.hive_round(double) returns double
location '$FILESYSTEM_PREFIX/test-warehouse/hive-exec.jar'
symbol='org.apache.hadoop.hive.ql.udf.UDFRound';

create function udf_test.hive_floor(double) returns bigint
location '$FILESYSTEM_PREFIX/test-warehouse/hive-exec.jar'
symbol='org.apache.hadoop.hive.ql.udf.UDFFloor';

create function udf_test.hive_mod(int, int) returns int
location '$FILESYSTEM_PREFIX/test-warehouse/hive-exec.jar'
symbol='org.apache.hadoop.hive.ql.udf.UDFPosMod';

create function udf_test.hive_bin(bigint) returns string
location '$FILESYSTEM_PREFIX/test-warehouse/hive-exec.jar'
symbol='org.apache.hadoop.hive.ql.udf.UDFBin';

create function udf_test.hive_lower(string) returns string
location '$FILESYSTEM_PREFIX/test-warehouse/hive-exec.jar'
symbol='org.apache.hadoop.hive.ql.udf.UDFLower';

create function udf_test.identity(boolean) returns boolean
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(tinyint) returns tinyint
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(smallint) returns smallint
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(int) returns int
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(bigint) returns bigint
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(float) returns float
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(double) returns double
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(string) returns string
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(string, string) returns string
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.identity(string, string, string) returns string
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdf';

create function udf_test.throws_exception() returns boolean
location '$FILESYSTEM_PREFIX/test-warehouse/impala-hive-udfs.jar'
symbol='com.cloudera.impala.TestUdfException';
====

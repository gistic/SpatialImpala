From 1d4c78c1f2415d86e607f8716ffe70b22fcaec8c Mon Sep 17 00:00:00 2001
From: anoopsjohn <anoopsamjohn@gmail.com>
Date: Fri, 26 Sep 2014 13:29:36 +0530
Subject: [PATCH 029/226] HBASE-12085 mob status should print human readable numbers.(Jingcheng Du)

Reason: MOB Feature
Author: Jingcheng Du
Ref: CDH-19420
---
 .../org/apache/hadoop/hbase/HColumnDescriptor.java |   54 +++++
 .../apache/hadoop/hbase/TestHColumnDescriptor.java |   18 ++
 .../apache/hadoop/hbase/util/PrettyPrinter.java    |   10 +
 .../hadoop/hbase/IntegrationTestIngestWithMOB.java |    5 +-
 .../hbase/master/ExpiredMobFileCleanerChore.java   |    4 +-
 .../hbase/master/handler/DeleteTableHandler.java   |    2 +-
 .../hadoop/hbase/mob/DefaultMobCompactor.java      |    2 +-
 .../hadoop/hbase/mob/DefaultMobStoreFlusher.java   |    2 +-
 .../hadoop/hbase/mob/ExpiredMobFileCleaner.java    |    2 +-
 .../org/apache/hadoop/hbase/mob/MobConstants.java  |    4 -
 .../java/org/apache/hadoop/hbase/mob/MobUtils.java |   23 --
 .../apache/hadoop/hbase/mob/mapreduce/Sweeper.java |    3 +-
 .../apache/hadoop/hbase/regionserver/HRegion.java  |    3 +-
 .../hbase/mob/TestDefaultMobStoreFlusher.java      |    4 +-
 .../hbase/mob/TestExpiredMobFileCleaner.java       |    9 +-
 .../hadoop/hbase/mob/TestMobDataBlockEncoding.java |    4 +-
 .../apache/hadoop/hbase/mob/TestMobFileCache.java  |   14 +-
 .../hbase/mob/mapreduce/TestMobSweepReducer.java   |    4 +-
 .../hadoop/hbase/mob/mapreduce/TestMobSweeper.java |    4 +-
 .../hbase/regionserver/TestDeleteMobTable.java     |    4 +-
 .../hadoop/hbase/regionserver/TestHMobStore.java   |   10 +-
 .../hbase/regionserver/TestMobCompaction.java      |    7 +-
 .../hbase/regionserver/TestMobStoreScanner.java    |    4 +-
 src/main/docbkx/hbase_mob.xml                      |  226 ++++++++++++++++++++
 24 files changed, 348 insertions(+), 74 deletions(-)
 create mode 100644 src/main/docbkx/hbase_mob.xml

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/HColumnDescriptor.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/HColumnDescriptor.java
index 660059a..5bd5db3 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/HColumnDescriptor.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/HColumnDescriptor.java
@@ -124,6 +124,12 @@ public class HColumnDescriptor implements WritableComparable<HColumnDescriptor>
   public static final String ENCRYPTION = "ENCRYPTION";
   public static final String ENCRYPTION_KEY = "ENCRYPTION_KEY";
 
+  public static final String IS_MOB = "IS_MOB";
+  public static final byte[] IS_MOB_BYTES = Bytes.toBytes(IS_MOB);
+  public static final String MOB_THRESHOLD = "MOB_THRESHOLD";
+  public static final byte[] MOB_THRESHOLD_BYTES = Bytes.toBytes(MOB_THRESHOLD);
+  public static final long DEFAULT_MOB_THRESHOLD = 100 * 1024; // 100k
+
   /**
    * Default compression type.
    */
@@ -261,6 +267,8 @@ public class HColumnDescriptor implements WritableComparable<HColumnDescriptor>
       }
       RESERVED_KEYWORDS.add(new ImmutableBytesWritable(Bytes.toBytes(ENCRYPTION)));
       RESERVED_KEYWORDS.add(new ImmutableBytesWritable(Bytes.toBytes(ENCRYPTION_KEY)));
+      RESERVED_KEYWORDS.add(new ImmutableBytesWritable(IS_MOB_BYTES));
+      RESERVED_KEYWORDS.add(new ImmutableBytesWritable(MOB_THRESHOLD_BYTES));
   }
 
   private static final int UNINITIALIZED = -1;
@@ -1168,6 +1176,10 @@ public class HColumnDescriptor implements WritableComparable<HColumnDescriptor>
       /* TTL for now, we can add more as we neeed */
     if (key.equals(HColumnDescriptor.TTL)) {
       unit = Unit.TIME_INTERVAL;
+    } else if (key.equals(HColumnDescriptor.MOB_THRESHOLD)) {
+      unit = Unit.LONG;
+    } else if (key.equals(HColumnDescriptor.IS_MOB)) {
+      unit = Unit.BOOLEAN;
     } else {
       unit = Unit.NONE;
     }
@@ -1460,4 +1472,46 @@ public class HColumnDescriptor implements WritableComparable<HColumnDescriptor>
     setValue(Bytes.toBytes(ENCRYPTION_KEY), keyBytes);
     return this;
   }
+
+  /**
+   * Gets the mob threshold of the family.
+   * If the size of a cell value is larger than this threshold, it's regarded as a mob.
+   * The default threshold is 1024*100(100K)B.
+   * @return The mob threshold.
+   */
+  public long getMobThreshold() {
+    byte[] threshold = getValue(MOB_THRESHOLD_BYTES);
+    return threshold != null && threshold.length == Bytes.SIZEOF_LONG ? Bytes.toLong(threshold)
+        : DEFAULT_MOB_THRESHOLD;
+  }
+
+  /**
+   * Sets the mob threshold of the family.
+   * @param threshold The mob threshold.
+   * @return this (for chained invocation)
+   */
+  public HColumnDescriptor setMobThreshold(long threshold) {
+    setValue(MOB_THRESHOLD_BYTES, Bytes.toBytes(threshold));
+    return this;
+  }
+
+  /**
+   * Gets whether the mob is enabled for the family.
+   * @return True if the mob is enabled for the family.
+   */
+  public boolean isMobEnabled() {
+    byte[] isMobEnabled = getValue(IS_MOB_BYTES);
+    return isMobEnabled != null && isMobEnabled.length == Bytes.SIZEOF_BOOLEAN
+        && Bytes.toBoolean(isMobEnabled);
+  }
+
+  /**
+   * Enables the mob for the family.
+   * @param isMobEnabled Whether to enable the mob for the family.
+   * @return this (for chained invocation)
+   */
+  public HColumnDescriptor setMobEnabled(boolean isMobEnabled) {
+    setValue(IS_MOB_BYTES, Bytes.toBytes(isMobEnabled));
+    return this;
+  }
 }
diff --git a/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHColumnDescriptor.java b/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHColumnDescriptor.java
index 2843b31..df3148e 100644
--- a/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHColumnDescriptor.java
+++ b/hbase-client/src/test/java/org/apache/hadoop/hbase/TestHColumnDescriptor.java
@@ -27,6 +27,8 @@ import org.apache.hadoop.hbase.io.encoding.DataBlockEncoding;
 import org.apache.hadoop.hbase.regionserver.BloomType;
 import org.apache.hadoop.hbase.testclassification.SmallTests;
 import org.apache.hadoop.hbase.util.BuilderStyleTest;
+import org.apache.hadoop.hbase.util.Bytes;
+import org.apache.hadoop.hbase.util.PrettyPrinter;
 import org.junit.experimental.categories.Category;
 import org.junit.Test;
 
@@ -53,6 +55,8 @@ public class TestHColumnDescriptor {
     hcd.setDataBlockEncoding(DataBlockEncoding.FAST_DIFF);
     hcd.setBloomFilterType(BloomType.ROW);
     hcd.setCompressionType(Algorithm.SNAPPY);
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(1000L);
 
 
     byte [] bytes = hcd.toByteArray();
@@ -69,6 +73,8 @@ public class TestHColumnDescriptor {
     assertTrue(deserializedHcd.getCompressionType().equals(Compression.Algorithm.SNAPPY));
     assertTrue(deserializedHcd.getDataBlockEncoding().equals(DataBlockEncoding.FAST_DIFF));
     assertTrue(deserializedHcd.getBloomFilterType().equals(BloomType.ROW));
+    assertEquals(hcd.isMobEnabled(), deserializedHcd.isMobEnabled());
+    assertEquals(hcd.getMobThreshold(), deserializedHcd.getMobThreshold());
   }
 
   @Test
@@ -95,4 +101,16 @@ public class TestHColumnDescriptor {
     desc.removeConfiguration(key);
     assertEquals(null, desc.getConfigurationValue(key));
   }
+
+  @Test
+  public void testMobValuesInHColumnDescriptorShouldReadable() {
+    boolean isMob = true;
+    long threshold = 1000;
+    String isMobString = PrettyPrinter.format(Bytes.toStringBinary(Bytes.toBytes(isMob)),
+        HColumnDescriptor.getUnit(HColumnDescriptor.IS_MOB));
+    String thresholdString = PrettyPrinter.format(Bytes.toStringBinary(Bytes.toBytes(threshold)),
+        HColumnDescriptor.getUnit(HColumnDescriptor.MOB_THRESHOLD));
+    assertEquals(String.valueOf(isMob), isMobString);
+    assertEquals(String.valueOf(threshold), thresholdString);
+  }
 }
diff --git a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PrettyPrinter.java b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PrettyPrinter.java
index 2b59967..24af09b 100644
--- a/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PrettyPrinter.java
+++ b/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PrettyPrinter.java
@@ -27,6 +27,8 @@ public class PrettyPrinter {
 
   public enum Unit {
     TIME_INTERVAL,
+    LONG,
+    BOOLEAN,
     NONE
   }
 
@@ -36,6 +38,14 @@ public class PrettyPrinter {
       case TIME_INTERVAL:
         human.append(humanReadableTTL(Long.valueOf(value)));
         break;
+      case LONG:
+        byte[] longBytes = Bytes.toBytesBinary(value);
+        human.append(String.valueOf(Bytes.toLong(longBytes)));
+        break;
+      case BOOLEAN:
+        byte[] booleanBytes = Bytes.toBytesBinary(value);
+        human.append(String.valueOf(Bytes.toBoolean(booleanBytes)));
+        break;
       default:
         human.append(value);
     }
diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java
index 95470b5..f8a4412 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java
@@ -25,7 +25,6 @@ import java.util.List;
 import org.apache.commons.cli.CommandLine;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.client.HBaseAdmin;
-import org.apache.hadoop.hbase.mob.MobConstants;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.LoadTestDataGeneratorWithMOB;
 import org.apache.hadoop.hbase.util.LoadTestTool;
@@ -118,8 +117,8 @@ public class IntegrationTestIngestWithMOB extends IntegrationTestIngest {
     admin.disableTable(tableName);
     for (HColumnDescriptor columnDescriptor : tableDesc.getFamilies()) {
       if(Arrays.equals(columnDescriptor.getName(), mobColumnFamily)) {
-        columnDescriptor.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-        columnDescriptor.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes((long) threshold));
+        columnDescriptor.setMobEnabled(true);
+        columnDescriptor.setMobThreshold((long) threshold);
         admin.modifyColumn(tableName, columnDescriptor);
       }
     }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ExpiredMobFileCleanerChore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ExpiredMobFileCleanerChore.java
index 98fe236..30b5be3 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ExpiredMobFileCleanerChore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/ExpiredMobFileCleanerChore.java
@@ -29,8 +29,6 @@ import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableDescriptors;
 import org.apache.hadoop.hbase.mob.ExpiredMobFileCleaner;
 import org.apache.hadoop.hbase.mob.MobConstants;
-import org.apache.hadoop.hbase.mob.MobUtils;
-import org.apache.hadoop.hbase.util.Threads;
 
 /**
  * The Class ExpiredMobFileCleanerChore for running cleaner regularly to remove the expired
@@ -57,7 +55,7 @@ public class ExpiredMobFileCleanerChore extends Chore {
       Map<String, HTableDescriptor> map = htds.getAll();
       for (HTableDescriptor htd : map.values()) {
         for (HColumnDescriptor hcd : htd.getColumnFamilies()) {
-          if (MobUtils.isMobFamily(hcd) && hcd.getMinVersions() == 0) {
+          if (hcd.isMobEnabled() && hcd.getMinVersions() == 0) {
             cleaner.cleanExpiredMobFiles(htd.getTableName().getNameAsString(), hcd);
           }
         }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/DeleteTableHandler.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/DeleteTableHandler.java
index 0720622..3edae4e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/DeleteTableHandler.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/DeleteTableHandler.java
@@ -194,7 +194,7 @@ public class DeleteTableHandler extends TableEventHandler {
     HColumnDescriptor[] hcds = hTableDescriptor.getColumnFamilies();
     boolean hasMob = false;
     for (HColumnDescriptor hcd : hcds) {
-      if (MobUtils.isMobFamily(hcd)) {
+      if (hcd.isMobEnabled()) {
         hasMob = true;
         break;
       }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
index fd35a15..cf70bd3 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobCompactor.java
@@ -60,7 +60,7 @@ public class DefaultMobCompactor extends DefaultCompactor {
       throw new IllegalArgumentException("The store " + store + " is not a HMobStore");
     }
     mobStore = (HMobStore) store;
-    mobSizeThreshold = MobUtils.getMobThreshold(store.getFamily());
+    mobSizeThreshold = store.getFamily().getMobThreshold();
   }
 
   /**
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
index 4a036a7..aba81ff 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/DefaultMobStoreFlusher.java
@@ -69,7 +69,7 @@ public class DefaultMobStoreFlusher extends DefaultStoreFlusher {
 
   public DefaultMobStoreFlusher(Configuration conf, Store store) throws IOException {
     super(conf, store);
-    mobCellValueSizeThreshold = MobUtils.getMobThreshold(store.getFamily());
+    mobCellValueSizeThreshold = store.getFamily().getMobThreshold();
     this.targetPath = MobUtils.getMobFamilyPath(conf, store.getTableName(),
         store.getColumnFamilyName());
     if (!this.store.getFileSystem().exists(targetPath)) {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/ExpiredMobFileCleaner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/ExpiredMobFileCleaner.java
index d3c11ad..7f38c44 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/ExpiredMobFileCleaner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/ExpiredMobFileCleaner.java
@@ -99,7 +99,7 @@ public class ExpiredMobFileCleaner extends Configured implements Tool {
     try {
       HTableDescriptor htd = admin.getTableDescriptor(tn);
       HColumnDescriptor family = htd.getFamily(Bytes.toBytes(familyName));
-      if (family == null || !MobUtils.isMobFamily(family)) {
+      if (family == null || !family.isMobEnabled()) {
         throw new IOException("Column family " + familyName + " is not a MOB column family");
       }
       if (family.getMinVersions() > 0) {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobConstants.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobConstants.java
index 4e3e7c8..7b0f9a0 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobConstants.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobConstants.java
@@ -32,10 +32,6 @@ import org.apache.hadoop.hbase.util.Bytes;
 @InterfaceStability.Evolving
 public class MobConstants {
 
-  public static final byte[] IS_MOB = Bytes.toBytes("IS_MOB");
-  public static final byte[] MOB_THRESHOLD = Bytes.toBytes("MOB_THRESHOLD");
-  public static final long DEFAULT_MOB_THRESHOLD = 100 * 1024; // 100k
-
   public static final String MOB_SCAN_RAW = "hbase.mob.scan.raw";
   public static final String MOB_CACHE_BLOCKS = "hbase.mob.cache.blocks";
   public static final String MOB_SCAN_REF_ONLY = "hbase.mob.scan.ref.only";
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
index e49d3ec..4001520 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
@@ -74,29 +74,6 @@ public class MobUtils {
   };
 
   /**
-   * Indicates whether the column family is a mob one.
-   * @param hcd The descriptor of a column family.
-   * @return True if this column family is a mob one, false if it's not.
-   */
-  public static boolean isMobFamily(HColumnDescriptor hcd) {
-    byte[] isMob = hcd.getValue(MobConstants.IS_MOB);
-    return isMob != null && isMob.length == 1 && Bytes.toBoolean(isMob);
-  }
-
-  /**
-   * Gets the mob threshold.
-   * If the size of a cell value is larger than this threshold, it's regarded as a mob.
-   * The default threshold is 1024*100(100K)B.
-   * @param hcd The descriptor of a column family.
-   * @return The threshold.
-   */
-  public static long getMobThreshold(HColumnDescriptor hcd) {
-    byte[] threshold = hcd.getValue(MobConstants.MOB_THRESHOLD);
-    return threshold != null && threshold.length == Bytes.SIZEOF_LONG ? Bytes.toLong(threshold)
-        : MobConstants.DEFAULT_MOB_THRESHOLD;
-  }
-
-  /**
    * Formats a date to a string.
    * @param date The date.
    * @return The string format of the date, it's yyyymmdd.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/Sweeper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/Sweeper.java
index d71dc83..451ee26 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/Sweeper.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/Sweeper.java
@@ -29,7 +29,6 @@ import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.HBaseAdmin;
-import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.util.Tool;
 import org.apache.hadoop.util.ToolRunner;
@@ -68,7 +67,7 @@ public class Sweeper extends Configured implements Tool {
       TableName tn = TableName.valueOf(tableName);
       HTableDescriptor htd = admin.getTableDescriptor(tn);
       HColumnDescriptor family = htd.getFamily(Bytes.toBytes(familyName));
-      if (family == null || !MobUtils.isMobFamily(family)) {
+      if (family == null || !family.isMobEnabled()) {
         throw new IOException("Column family " + familyName + " is not a MOB column family");
       }
       SweepJob job = new SweepJob(conf, fs);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 0f222a7..551297e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -121,7 +121,6 @@ import org.apache.hadoop.hbase.io.hfile.HFile;
 import org.apache.hadoop.hbase.ipc.CallerDisconnectedException;
 import org.apache.hadoop.hbase.ipc.RpcCallContext;
 import org.apache.hadoop.hbase.ipc.RpcServer;
-import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.monitoring.MonitoredTask;
 import org.apache.hadoop.hbase.monitoring.TaskMonitor;
 import org.apache.hadoop.hbase.protobuf.ProtobufUtil;
@@ -3784,7 +3783,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver { //
   }
 
   protected HStore instantiateHStore(final HColumnDescriptor family) throws IOException {
-    if (MobUtils.isMobFamily(family)) {
+    if (family.isMobEnabled()) {
       if (HFile.getFormatVersion(this.conf) < HFile.MIN_FORMAT_VERSION_WITH_TAGS) {
         throw new IOException("A minimum HFile version of "
             + HFile.MIN_FORMAT_VERSION_WITH_TAGS
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestDefaultMobStoreFlusher.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestDefaultMobStoreFlusher.java
index f05ec12..c234c52 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestDefaultMobStoreFlusher.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestDefaultMobStoreFlusher.java
@@ -138,8 +138,8 @@ public class TestDefaultMobStoreFlusher {
    try {
      HTableDescriptor desc = new HTableDescriptor(TableName.valueOf(TN));
      HColumnDescriptor hcd = new HColumnDescriptor(family);
-     hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-     hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(3L));
+     hcd.setMobEnabled(true);
+     hcd.setMobThreshold(3L);
      hcd.setMaxVersions(4);
      desc.addFamily(hcd);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestExpiredMobFileCleaner.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestExpiredMobFileCleaner.java
index 7cba86c..ea50075 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestExpiredMobFileCleaner.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestExpiredMobFileCleaner.java
@@ -33,7 +33,6 @@ import org.apache.hadoop.hbase.client.Admin;
 import org.apache.hadoop.hbase.client.HTable;
 import org.apache.hadoop.hbase.client.Put;
 import org.apache.hadoop.hbase.mob.ExpiredMobFileCleaner;
-import org.apache.hadoop.hbase.mob.MobConstants;
 import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.util.ToolRunner;
@@ -87,8 +86,8 @@ public class TestExpiredMobFileCleaner {
   private void init() throws Exception {
     HTableDescriptor desc = new HTableDescriptor(tableName);
     HColumnDescriptor hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(3L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(3L);
     hcd.setMaxVersions(4);
     desc.addFamily(hcd);
 
@@ -100,8 +99,8 @@ public class TestExpiredMobFileCleaner {
 
   private void modifyColumnExpiryDays(int expireDays) throws Exception {
     HColumnDescriptor hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(3L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(3L);
     // change ttl as expire days to make some row expired
     int timeToLive = expireDays * secondsOfDay();
     hcd.setTimeToLive(timeToLive);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobDataBlockEncoding.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobDataBlockEncoding.java
index 323d5a3..a507de0 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobDataBlockEncoding.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobDataBlockEncoding.java
@@ -76,8 +76,8 @@ public class TestMobDataBlockEncoding {
       throws Exception {
     desc = new HTableDescriptor(TableName.valueOf(TN));
     hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(threshold));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(threshold);
     hcd.setMaxVersions(4);
     hcd.setDataBlockEncoding(encoding);
     desc.addFamily(hcd);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobFileCache.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobFileCache.java
index dec2e41..0ba77e6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobFileCache.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobFileCache.java
@@ -80,14 +80,14 @@ public class TestMobFileCache extends TestCase {
     conf.setInt("hfile.format.version", 3);
     HTableDescriptor htd = UTIL.createTableDescriptor("testMobFileCache");
     HColumnDescriptor hcd1 = new HColumnDescriptor(FAMILY1);
-    hcd1.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd1.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(0L));
+    hcd1.setMobEnabled(true);
+    hcd1.setMobThreshold(0);
     HColumnDescriptor hcd2 = new HColumnDescriptor(FAMILY2);
-    hcd2.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd2.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(0L));
+    hcd2.setMobEnabled(true);
+    hcd2.setMobThreshold(0);
     HColumnDescriptor hcd3 = new HColumnDescriptor(FAMILY3);
-    hcd3.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd3.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(0L));
+    hcd3.setMobEnabled(true);
+    hcd3.setMobThreshold(0);
     htd.addFamily(hcd1);
     htd.addFamily(hcd2);
     htd.addFamily(hcd3);
@@ -116,7 +116,7 @@ public class TestMobFileCache extends TestCase {
   private Path createMobStoreFile(Configuration conf, String family) throws IOException {
     HColumnDescriptor hcd = new HColumnDescriptor(family);
     hcd.setMaxVersions(4);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
+    hcd.setMobEnabled(true);
     mobCacheConf = new MobCacheConfig(conf, hcd);
     return createMobStoreFile(conf, hcd);
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweepReducer.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweepReducer.java
index 0f4c3ff..a45ed34 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweepReducer.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweepReducer.java
@@ -92,8 +92,8 @@ public class TestMobSweepReducer {
   public void setUp() throws Exception {
     HTableDescriptor desc = new HTableDescriptor(tableName);
     HColumnDescriptor hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(3L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(3L);
     hcd.setMaxVersions(4);
     desc.addFamily(hcd);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweeper.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweeper.java
index 10bfa7a..2021bd8 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweeper.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/mapreduce/TestMobSweeper.java
@@ -86,8 +86,8 @@ public class TestMobSweeper {
     tableName = "testSweeper" + tid;
     HTableDescriptor desc = new HTableDescriptor(tableName);
     HColumnDescriptor hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(3L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(3L);
     hcd.setMaxVersions(4);
     desc.addFamily(hcd);
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java
index b4fcaf1..3ad196e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java
@@ -85,8 +85,8 @@ public class TestDeleteMobTable {
     TableName tn = TableName.valueOf(tableName);
     HTableDescriptor htd = new HTableDescriptor(tn);
     HColumnDescriptor hcd = new HColumnDescriptor(FAMILY);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(0L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(0);
     htd.addFamily(hcd);
     HBaseAdmin admin = null;
     HTable table = null;
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java
index f76a7fa..bcd0e54 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java
@@ -115,8 +115,8 @@ public class TestHMobStore {
   private void init(String methodName, Configuration conf, boolean testStore)
   throws IOException {
     hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(3L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(3L);
     hcd.setMaxVersions(4);
     init(methodName, conf, hcd, testStore);
   }
@@ -370,8 +370,8 @@ public class TestHMobStore {
 
     HColumnDescriptor hcd;
     hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(100L));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(100);
     hcd.setMaxVersions(4);
     init(name.getMethodName(), conf, hcd, false);
 
@@ -411,7 +411,7 @@ public class TestHMobStore {
       //this is not mob reference cell.
       Assert.assertFalse(MobUtils.isMobReferenceCell(cell));
       Assert.assertEquals(expected.get(i), results.get(i));
-      Assert.assertEquals(100, MobUtils.getMobThreshold(store.getFamily()));
+      Assert.assertEquals(100, store.getFamily().getMobThreshold());
     }
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java
index 6985b7b..abf41b8 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java
@@ -110,8 +110,8 @@ public class TestMobCompaction {
     compactionThreshold = conf.getInt("hbase.hstore.compactionThreshold", 3);
     htd = UTIL.createTableDescriptor(name.getMethodName());
     hcd = htd.getFamily(COLUMN_FAMILY);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(mobThreshold));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(mobThreshold);
     hcd.setMaxVersions(1);
 
     region = UTIL.createLocalHRegion(htd, null, null);
@@ -170,8 +170,7 @@ public class TestMobCompaction {
     assertEquals("Before compaction: rows", compactionThreshold, countRows());
     assertEquals("Before compaction: mob rows", compactionThreshold, countMobRows());
     // Change the threshold larger than the data size
-    region.getTableDesc().getFamily(COLUMN_FAMILY).setValue(
-        MobConstants.MOB_THRESHOLD, Bytes.toBytes(500L));
+    region.getTableDesc().getFamily(COLUMN_FAMILY).setMobThreshold(500);
     region.initialize();
     region.compactStores();
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
index 38e2c5f..6955ca6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
@@ -83,8 +83,8 @@ public class TestMobStoreScanner {
   public void setUp(long threshold, String TN) throws Exception {
     desc = new HTableDescriptor(TableName.valueOf(TN));
     hcd = new HColumnDescriptor(family);
-    hcd.setValue(MobConstants.IS_MOB, Bytes.toBytes(Boolean.TRUE));
-    hcd.setValue(MobConstants.MOB_THRESHOLD, Bytes.toBytes(threshold));
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(threshold);
     hcd.setMaxVersions(4);
     desc.addFamily(hcd);
     admin = new HBaseAdmin(TEST_UTIL.getConfiguration());
diff --git a/src/main/docbkx/hbase_mob.xml b/src/main/docbkx/hbase_mob.xml
new file mode 100644
index 0000000..d6fed1e
--- /dev/null
+++ b/src/main/docbkx/hbase_mob.xml
@@ -0,0 +1,226 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<chapter version="5.0" xml:id="mob" xmlns="http://docbook.org/ns/docbook"
+    xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
+    xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
+    xmlns:html="http://www.w3.org/1999/xhtml" xmlns:db="http://docbook.org/ns/docbook">
+    <!--
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+-->
+
+    <title>HBase Medium Object (MOB) Storage</title>
+    <para>Data comes in many sizes, and saving all of your data in HBase, including binary data such
+        as images and documents, is ideal. HBase can technically handle binary objects with cells
+        that are up to 10MB in size. However, HBase's normal read and write paths are optimized for
+        values smaller than 100KB in size. When HBase deals with large numbers of values up to 10MB,
+        referred to here as <firstterm>medium objects</firstterm>, or <firstterm>MOBs</firstterm>,
+        performance is degraded due to write amplification caused by splits and compactions. HBase
+        2.0+ adds support for better managing large numbers of MOBs while maintaining performance,
+        consistency, and low operational overhead. MOB support is provided by the work done in <link
+            xlink:href="https://issues.apache.org/jira/browse/HBASE-11339"
+        >HBASE-11339</link>.</para>
+
+    <para>To take advantage of MOB, you need to use HFile version 3. Optionally, configure the MOB
+        file reader's cache settings for each RegionServer (see <xref linkend="mob.cache.configure"
+        />), then configure specific columns to hold MOB data. Currently, you also need to configure
+        a periodic re-optimization of MOB data layout, but this requirement is expected to be
+        removed at a later date.</para>
+    <para>Client code does not need to change to take advantage of HBase MOB support. The feature is
+        transparent to the client.</para>
+    
+    <section>
+        <title>Limitations of MOB Functionality</title>
+        <para>Work on HBase MOB is ongoing. Work is needed for support for snapshots (<link
+                xlink:href="https://issues.apache.org/jira/browse/HBASE-11645">HBASE-11645</link>),
+            metrics (<link xlink:href="https://issues.apache.org/jira/browse/HBASE-11683"
+                >HBASE-11683</link>), and a native compaction mechanism (<link
+                xlink:href="https://issues.apache.org/jira/browse/HBASE-11861"
+            >HBASE-11861)</link>.</para>
+    </section>
+    
+    <section>
+        <title>Configure Columns for MOB</title>
+        <para>You can configure columns to support MOB during table creation or alteration, either
+            in HBase Shell or via the Java API. The two relevant properties are the boolean
+                <code>IS_MOB</code> and the <code>MOB_THRESHOLD</code>, which is the number of bytes
+            at which an object is considered to be a MOB. Only <code>IS_MOB</code> is required. If
+            you do not specify the <code>MOB_THRESHOLD</code>, the default threshold value of 100 kb
+            is used.</para>
+        <example>
+            <title>Configure a Column for MOB Using HBase Shell</title>
+            <screen>
+hbase> create 't1', {NAME => 'f1', IS_MOB => true, MOB_THRESHOLD => 102400}
+hbase> alter 't1', {NAME => 'f1', IS_MOB => true, MOB_THRESHOLD => 102400}
+            </screen>
+        </example>
+        <example>
+            <title>Configure a Column for MOB Using the API</title>
+            <programlisting language="java">
+...
+HColumnDescriptor hcd = new HColumnDescriptor("f");
+hcd.setMobEnabled(true);
+...
+hcd.setMobThreshold(102400L);
+...
+            </programlisting>
+        </example>
+    </section>
+
+    <section>
+        <title>Testing MOB</title>
+        <para>The utility <command>org.apache.hadoop.hbase.IntegrationTestIngestMOB</command> is
+            provided to assist with testing the MOB feature. The utility is run as follows:</para>
+        <screen>$ <userinput>sudo -u hbase hbase org.apache.hadoop.hbase.IntegrationTestIngestMOB \
+            -threshold 100*1024 \
+            -minMobDataSize 100*1024*4/5 \
+            -maxMobDataSize 100*1024*50</userinput></screen>
+        <itemizedlist>
+            <listitem>
+                <para><literal>threshold</literal> is the threshold at which cells are considered to
+                    be MOBs. The default is 1 kB.</para>
+            </listitem>
+            <listitem>
+                <para><literal>minMobDataSize</literal> is the minimum value for the size of MOB
+                    data. The default is 512 B.</para>
+            </listitem>
+            <listitem>
+                <para><literal>maxMobDataSize</literal> is the maximum value for the size of MOB
+                    data. The default is 5 kB.</para>
+            </listitem>
+        </itemizedlist>
+    </section>
+
+    <section>
+        <title>Set Up MOB Re-Optimization Tasks</title>
+        <para>The MOB feature introduces a new read and write path to HBase and currently requires
+            an external tool, the <command>sweeper</command> tool, for housekeeping and
+            optimization. The <command>sweeper</command> tool uses MapReduce to coalesce small MOB
+            files or MOB files with many deletions or updates</para>
+
+        <procedure>
+            <title>Configure and Run the <command>sweeper</command> Tool</title>
+            <step>
+                <para>First, configure the <command>sweeper</command>'s properties in the
+                    RegionServer's <filename>hbase-site.xml</filename> file. Adjust these properties
+                    to suit your environment.</para>
+                <programlisting language="xml"><![CDATA[
+<property>
+    <name>hbase.mob.sweep.tool.compaction.ratio</name>
+    <value>0.5f</value>
+    <description>
+      If there're too many cells deleted in a mob file, it's regarded
+      as an invalid file and needs to be merged.
+      If existingCellsSize/mobFileSize is less than ratio, it's regarded
+      as an invalid file. The default value is 0.5f.
+    </description>
+</property>
+<property>
+    <name>hbase.mob.sweep.tool.compaction.mergeable.size</name>
+    <value>134217728</value>
+    <description>
+      If the size of a mob file is less than this value, it's regarded as a small
+      file and needs to be merged. The default value is 128MB.
+    </description>
+</property>
+<property>
+    <name>hbase.mob.sweep.tool.compaction.memstore.flush.size</name>
+    <value>134217728</value>
+    <description>
+      The flush size for the memstore used by sweep job. Each sweep reducer owns such a memstore.
+      The default value is 128MB.
+    </description>
+</property>
+<property>
+    <name>hbase.mob.cleaner.interval</name>
+    <value>86400000</value>
+    <description>
+      The period that ExpiredMobFileCleaner runs. The unit is millisecond.
+      The default value is one day.
+    </description>
+</property>]]>
+                </programlisting>
+            </step>
+            <step>
+                <para>Next, add the HBase install directory, <envar>$HBASE_HOME/*</envar>, and HBase
+                    library directory to <filename>yarn-site.xml</filename> Adjust this example to
+                    suit your environment.</para>
+                <programlisting language="xml"><![CDATA[
+<property>
+    <description>Classpath for typical applications.</description>
+    <name>yarn.application.classpath</name>
+    <value>
+        $HADOOP_CONF_DIR,
+        $HADOOP_COMMON_HOME/*,$HADOOP_COMMON_HOME/lib/*,
+        $HADOOP_HDFS_HOME/*,$HADOOP_HDFS_HOME/lib/*,
+        $HADOOP_MAPRED_HOME/*,$HADOOP_MAPRED_HOME/lib/*,
+        $HADOOP_YARN_HOME/*,$HADOOP_YARN_HOME/lib/*,
+        $HBASE_HOME/*, $HBASE_HOME/lib/*
+    </value>
+</property>]]>
+                </programlisting>
+            </step>
+            <step>
+                <para>Finally, run the <command>sweeper</command> tool for each column which is
+                    configured for MOB..</para>
+                <screen>$ <userinput>org.apache.hadoop.hbase.mob.compactions.Sweeper \
+                    <replaceable>tableName</replaceable> \
+                    <replaceable>familyName</replaceable></userinput></screen>
+            </step>
+        </procedure>
+    </section>
+    <section xml:id="mob.cache.configure">
+        <title>Configure the MOB Cache</title>
+        <para>Because there can be a large number of MOB files at any time, as compared to the
+            number of HFiles, MOB files are not always kept open. The MOB file reader cache is a LRU
+            cache which keeps the most recently used MOB files open. To configure the MOB file
+            reader's cache on each RegionServer, add the following properties to the RegionServer's
+                <filename>hbase-site.xm</filename>l, customize the configuration to suit your
+            environment, and restart or rolling restart the RegionServer.</para>
+        <programlisting language="xml"><![CDATA[
+<property>
+    <name>hbase.mob.file.cache.size</name>
+    <value>1000</value>
+    <description>
+      Number of opened file handlers to cache.
+      A larger value will benefit reads by provinding more file handlers per mob
+      file cache and would reduce frequent file opening and closing.
+      However, if this is set too high, this could lead to a "too many opened file handers"
+      The default value is 1000.
+    </description>
+</property>
+<property>
+    <name>hbase.mob.cache.evict.period</name>
+    <value>3600</value>
+    <description>
+      The amount of time in seconds before the mob cache evicts cached mob files.
+      The default value is 3600 seconds.
+    </description>
+</property>
+<property>
+    <name>hbase.mob.cache.evict.remain.ratio</name>
+    <value>0.5f</value>
+    <description>
+      The ratio (between 0.0 and 1.0) of files that remains cached after an eviction
+      is triggered when the number of cached mob files exceeds the hbase.mob.file.cache.size.
+      The default value is 0.5f.
+    </description>
+</property>
+]]>
+        </programlisting>
+    </section>
+</chapter>
\ No newline at end of file
-- 
1.7.0.4


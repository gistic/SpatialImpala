From cb3eceefcd0ba6e0ccfd6a551b1dae64939884a3 Mon Sep 17 00:00:00 2001
From: Jonathan M Hsieh <jmhsieh@apache.org>
Date: Tue, 3 Mar 2015 09:20:03 -0800
Subject: [PATCH 089/226] HBASE-13154 add support for mob in TestAcidGuarantees and IntegrationTestAcidGuarantees

Reason: Mob Testing
Author: Jonathan Hsieh
Ref: CDH-23959
---
 .../hbase/IntegrationTestAcidGuarantees.java       |    3 +-
 .../apache/hadoop/hbase/TestAcidGuarantees.java    |   66 +++++++++++++++++++-
 2 files changed, 65 insertions(+), 4 deletions(-)

diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestAcidGuarantees.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestAcidGuarantees.java
index 7250eb3..b2f74ea 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestAcidGuarantees.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestAcidGuarantees.java
@@ -55,7 +55,8 @@ public class IntegrationTestAcidGuarantees extends IntegrationTestBase {
     int numGetters = c.getInt("numGetters", 2);
     int numScanners = c.getInt("numScanners", 2);
     int numUniqueRows = c.getInt("numUniqueRows", 3);
-    tag.runTestAtomicity(millis, numWriters, numGetters, numScanners, numUniqueRows, true);
+    boolean useMob = c.getBoolean("useMob",false);
+    tag.runTestAtomicity(millis, numWriters, numGetters, numScanners, numUniqueRows, true, useMob);
     return 0;
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java
index 2b53aab..969199e 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java
@@ -74,12 +74,21 @@ public class TestAcidGuarantees implements Tool {
   // when run as main
   private Configuration conf;
 
-  private void createTableIfMissing()
+  private void createTableIfMissing(boolean useMob)
     throws IOException {
     try {
       util.createTable(TABLE_NAME, FAMILIES);
     } catch (TableExistsException tee) {
     }
+
+    if (useMob) {
+      HTableDescriptor htd = util.getHBaseAdmin().getTableDescriptor(TABLE_NAME);
+      HColumnDescriptor hcd =  htd.getColumnFamilies()[0];
+      // force mob enabled such that all data is mob data
+      hcd.setMobEnabled(true);
+      hcd.setMobThreshold(4);
+      util.getHBaseAdmin().modifyColumn(TABLE_NAME, hcd);
+    }
   }
 
   public TestAcidGuarantees() {
@@ -89,6 +98,7 @@ public class TestAcidGuarantees implements Tool {
     // prevent aggressive region split
     conf.set(HConstants.HBASE_REGION_SPLIT_POLICY_KEY,
             ConstantSizeRegionSplitPolicy.class.getName());
+    conf.setInt("hfile.format.version", 3); // for mob tests
     util = new HBaseTestingUtility(conf);
   }
 
@@ -261,7 +271,19 @@ public class TestAcidGuarantees implements Tool {
       int numScanners,
       int numUniqueRows,
       final boolean systemTest) throws Exception {
-    createTableIfMissing();
+    runTestAtomicity(millisToRun, numWriters, numGetters, numScanners, numUniqueRows, systemTest,
+            false);
+  }
+
+  public void runTestAtomicity(long millisToRun,
+    int numWriters,
+    int numGetters,
+    int numScanners,
+    int numUniqueRows,
+    final boolean systemTest,
+    final boolean useMob) throws Exception {
+
+    createTableIfMissing(useMob);
     TestContext ctx = new TestContext(util.getConfiguration());
 
     byte rows[][] = new byte[numUniqueRows][];
@@ -361,6 +383,42 @@ public class TestAcidGuarantees implements Tool {
     }
   }
 
+  @Test
+  public void testMobGetAtomicity() throws Exception {
+    util.startMiniCluster(1);
+    try {
+      boolean systemTest = false;
+      boolean useMob = true;
+      runTestAtomicity(20000, 5, 5, 0, 3, systemTest, useMob);
+    } finally {
+      util.shutdownMiniCluster();
+    }
+  }
+
+  @Test
+  public void testMobScanAtomicity() throws Exception {
+    util.startMiniCluster(1);
+    try {
+      boolean systemTest = false;
+      boolean useMob = true;
+      runTestAtomicity(20000, 5, 0, 5, 3, systemTest, useMob);
+    } finally {
+      util.shutdownMiniCluster();
+    }
+  }
+
+  @Test
+  public void testMobMixedAtomicity() throws Exception {
+    util.startMiniCluster(1);
+    try {
+      boolean systemTest = false;
+      boolean useMob = true;
+      runTestAtomicity(20000, 5, 2, 2, 3, systemTest, useMob);
+    } finally {
+      util.shutdownMiniCluster();
+    }
+  }
+
   ////////////////////////////////////////////////////////////////////////////
   // Tool interface
   ////////////////////////////////////////////////////////////////////////////
@@ -383,7 +441,9 @@ public class TestAcidGuarantees implements Tool {
     int numGetters = c.getInt("numGetters", 2);
     int numScanners = c.getInt("numScanners", 2);
     int numUniqueRows = c.getInt("numUniqueRows", 3);
-    runTestAtomicity(millis, numWriters, numGetters, numScanners, numUniqueRows, true);
+    boolean useMob = c.getBoolean("useMob",false);
+    assert useMob && c.getInt("hfile.format.version", 2) == 3 : "Mob runs must use hfile v3";
+    runTestAtomicity(millis, numWriters, numGetters, numScanners, numUniqueRows, true, useMob);
     return 0;
   }
 
-- 
1.7.0.4


From 320bfcd431f99c5a5c14a67713687e00947da6b7 Mon Sep 17 00:00:00 2001
From: Rajesh Nishtala <rajeshn@fb.com>
Date: Mon, 20 Apr 2015 17:34:25 -0700
Subject: [PATCH 224/226] HBASE-13471 Fix a possible infinite loop in doMiniBatchMutation

Reason: Bug
Author: Rajesh Nishtala
Ref: CDH-30873

Summary: in doMiniBatchMutation it is possible to get into an infinite loop when a query has a row that is not in the region. If the batch had an invalid row, the row lock further down the function would fail to acquire because it was an invalid row. However we'd catch the exception and improperly treat it as if we had not acquired the lock and then try acquiring the lock again. Thus once we got into this state we'd be stuck in an infinite loop. Worse yet, this infiite loop would occur with the readLock held. So any other opertaions such as doClose() would be locked out and stuck. The patch is to check whether the row is valid and short circuit the failure when it doesn't work.

Test Plan: IntegrationTestReplication would consistently fail when trying to disable large tables before the fix. After the test the tests pass consistently.

Reviewers: eclark

Subscribers: asameet

Differential Revision: https://reviews.facebook.net/D37437

Signed-off-by: Elliott Clark <eclark@apache.org>
---
 .../apache/hadoop/hbase/regionserver/HRegion.java  |    8 +++++++-
 1 files changed, 7 insertions(+), 1 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 1e4e1df..8ee2305 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -2869,6 +2869,7 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver { //
           } else {
             prepareDelete((Delete) mutation);
           }
+          checkRow(mutation.getRow(), "doMiniBatchMutation");
         } catch (NoSuchColumnFamilyException nscf) {
           LOG.warn("No such column family in batch mutation", nscf);
           batchOp.retCodeDetails[lastIndexExclusive] = new OperationStatus(
@@ -2881,6 +2882,12 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver { //
               OperationStatusCode.SANITY_CHECK_FAILURE, fsce.getMessage());
           lastIndexExclusive++;
           continue;
+        } catch (WrongRegionException we) {
+          LOG.warn("Batch mutation had a row that does not belong to this region", we);
+          batchOp.retCodeDetails[lastIndexExclusive] = new OperationStatus(
+              OperationStatusCode.SANITY_CHECK_FAILURE, we.getMessage());
+          lastIndexExclusive++;
+          continue;
         }
 
         // If we haven't got any rows in our batch, we should block to
@@ -4773,7 +4780,6 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver { //
    * started (the calling thread has already acquired the region-close-guard lock).
    */
   protected RowLock getRowLockInternal(byte[] row, boolean waitForLock) throws IOException {
-    checkRow(row, "row lock");
     HashedBytes rowKey = new HashedBytes(row);
     RowLockContext rowLockContext = new RowLockContext(rowKey);
 
-- 
1.7.0.4


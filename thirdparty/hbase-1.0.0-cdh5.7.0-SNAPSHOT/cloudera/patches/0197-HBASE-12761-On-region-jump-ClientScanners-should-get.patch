From 4de2a76cff3c26153f877bfc71186fd70310132f Mon Sep 17 00:00:00 2001
From: Jurriaan Mous <jurmous@jurmo.us>
Date: Sun, 28 Dec 2014 13:53:03 +0100
Subject: [PATCH 197/226] HBASE-12761 On region jump ClientScanners should get next row start key instead of a skip.

Reason: Product Requirement (Compatibility)
Author: Jurriaan Mous
Ref: CDH-27345

Signed-off-by: stack <stack@apache.org>
---
 .../apache/hadoop/hbase/client/ClientScanner.java  |   53 +++++++-------------
 .../hadoop/hbase/client/ReversedClientScanner.java |    3 +-
 .../hbase/client/ScannerCallableWithReplicas.java  |    2 +
 3 files changed, 22 insertions(+), 36 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
index 65ffe98..b9593b8 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java
@@ -47,6 +47,8 @@ import org.apache.hadoop.hbase.util.Bytes;
 
 import com.google.common.annotations.VisibleForTesting;
 
+import static org.apache.hadoop.hbase.client.ReversedClientScanner.createClosestRowBefore;
+
 /**
  * Implements the scanner interface for the HBase client.
  * If there are multiple regions in a table, this scanner will iterate
@@ -109,7 +111,8 @@ public class ClientScanner extends AbstractClientScanner {
    */
   public ClientScanner(final Configuration conf, final Scan scan, final TableName tableName,
       ClusterConnection connection, RpcRetryingCallerFactory rpcFactory,
-      RpcControllerFactory controllerFactory, ExecutorService pool, int primaryOperationTimeout) throws IOException {
+      RpcControllerFactory controllerFactory, ExecutorService pool, int primaryOperationTimeout)
+      throws IOException {
       if (LOG.isTraceEnabled()) {
         LOG.trace("Scan table=" + tableName
             + ", startRow=" + Bytes.toStringBinary(scan.getStartRow()));
@@ -246,7 +249,7 @@ public class ClientScanner extends AbstractClientScanner {
       // Close the previous scanner if it's open
       if (this.callable != null) {
         this.callable.setClose();
-        call(scan, callable, caller, scannerTimeout);
+        call(callable, caller, scannerTimeout);
         this.callable = null;
       }
 
@@ -283,7 +286,7 @@ public class ClientScanner extends AbstractClientScanner {
         callable = getScannerCallable(localStartKey, nbRows);
         // Open a scanner on the region server starting at the
         // beginning of the region
-        call(scan, callable, caller, scannerTimeout);
+        call(callable, caller, scannerTimeout);
         this.currentRegion = callable.getHRegionInfo();
         if (this.scanMetrics != null) {
           this.scanMetrics.countOfRegions.incrementAndGet();
@@ -300,7 +303,7 @@ public class ClientScanner extends AbstractClientScanner {
     return callable.isAnyRPCcancelled();
   }
 
-  Result[] call(Scan scan, ScannerCallableWithReplicas callable,
+  Result[] call(ScannerCallableWithReplicas callable,
       RpcRetryingCaller<Result[]> caller, int scannerTimeout)
       throws IOException, RuntimeException {
     if (Thread.interrupted()) {
@@ -327,9 +330,9 @@ public class ClientScanner extends AbstractClientScanner {
 
     /**
      * Publish the scan metrics. For now, we use scan.setAttribute to pass the metrics back to the
-     * application or TableInputFormat.Later, we could push it to other systems. We don't use metrics
-     * framework because it doesn't support multi-instances of the same metrics on the same machine;
-     * for scan/map reduce scenarios, we will have multiple scans running at the same time.
+     * application or TableInputFormat.Later, we could push it to other systems. We don't use
+     * metrics framework because it doesn't support multi-instances of the same metrics on the same
+     * machine; for scan/map reduce scenarios, we will have multiple scans running at the same time.
      *
      * By default, scan metrics are disabled; if the application wants to collect them, this
      * behavior can be turned on by calling calling {@link Scan#setScanMetricsEnabled(boolean)}
@@ -388,31 +391,10 @@ public class ClientScanner extends AbstractClientScanner {
     boolean serverHasMoreResults = false;
     do {
       try {
-        if (skipFirst) {
-          // Skip only the first row (which was the last row of the last
-          // already-processed batch).
-          callable.setCaching(1);
-          values = call(scan, callable, caller, scannerTimeout);
-          // When the replica switch happens, we need to do certain operations
-          // again. The scannercallable will openScanner with the right startkey
-          // but we need to pick up from there. Bypass the rest of the loop
-          // and let the catch-up happen in the beginning of the loop as it
-          // happens for the cases where we see exceptions. Since only openScanner
-          // would have happened, values would be null
-          if (values == null && callable.switchedToADifferentReplica()) {
-            if (this.lastResult != null) { //only skip if there was something read earlier
-              skipFirst = true;
-            }
-            this.currentRegion = callable.getHRegionInfo();
-            continue;
-          }
-          callable.setCaching(this.caching);
-          skipFirst = false;
-        }
         // Server returns a null values if scanning is to stop. Else,
         // returns an empty array if scanning is to go on and we've just
         // exhausted current region.
-        values = call(scan, callable, caller, scannerTimeout);
+        values = call(callable, caller, scannerTimeout);
         // When the replica switch happens, we need to do certain operations
         // again. The callable will openScanner with the right startkey
         // but we need to pick up from there. Bypass the rest of the loop
@@ -467,12 +449,13 @@ public class ClientScanner extends AbstractClientScanner {
           // scanner starts at the correct row. Otherwise we may see previously
           // returned rows again.
           // (ScannerCallable by now has "relocated" the correct region)
-          this.scan.setStartRow(this.lastResult.getRow());
-
-          // Skip first row returned.  We already let it out on previous
-          // invocation.
-          skipFirst = true;
+          if (scan.isReversed()) {
+            scan.setStartRow(createClosestRowBefore(lastResult.getRow()));
+          } else {
+            scan.setStartRow(Bytes.add(lastResult.getRow(), new byte[1]));
+          }
         }
+
         if (e instanceof OutOfOrderScannerNextException) {
           if (retryAfterOutOfOrderException) {
             retryAfterOutOfOrderException = false;
@@ -726,7 +709,7 @@ public class ClientScanner extends AbstractClientScanner {
       if (callable != null) {
         callable.setClose();
         try {
-          call(scan, callable, caller, scannerTimeout);
+          call(callable, caller, scannerTimeout);
         } catch (UnknownScannerException e) {
            // We used to catch this error, interpret, and rethrow. However, we
            // have since decided that it's not nice for a scanner's close to
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java
index 37eea32..13b164d 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java
@@ -53,7 +53,8 @@ public class ReversedClientScanner extends ClientScanner {
       TableName tableName, ClusterConnection connection,
       RpcRetryingCallerFactory rpcFactory, RpcControllerFactory controllerFactory,
       ExecutorService pool, int primaryOperationTimeout) throws IOException {
-    super(conf, scan, tableName, connection, rpcFactory, controllerFactory, pool, primaryOperationTimeout);
+    super(conf, scan, tableName, connection, rpcFactory, controllerFactory, pool,
+        primaryOperationTimeout);
   }
 
   @Override
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallableWithReplicas.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallableWithReplicas.java
index dd5f738..bcb4f73 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallableWithReplicas.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallableWithReplicas.java
@@ -46,6 +46,8 @@ import org.apache.hadoop.hbase.util.Pair;
 
 import com.google.common.annotations.VisibleForTesting;
 
+import static org.apache.hadoop.hbase.client.ReversedClientScanner.createClosestRowBefore;
+
 /**
  * This class has the logic for handling scanners for regions with and without replicas.
  * 1. A scan is attempted on the default (primary) region
-- 
1.7.0.4


From 55aefa2395fd470b51e8f8b00fbd946fb4293acd Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Fri, 13 Mar 2015 17:11:27 +0000
Subject: [PATCH 111/226] HBASE-13227 LoadIncrementalHFile should skip non-files inside a possible family-dir

Reason: Bug
Author: Matteo Bertozzi
Ref: CDH-26040
---
 .../hbase/mapreduce/LoadIncrementalHFiles.java     |   16 ++++++++++++++--
 .../hbase/mapreduce/TestLoadIncrementalHFiles.java |    6 ++++--
 2 files changed, 18 insertions(+), 4 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/LoadIncrementalHFiles.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/LoadIncrementalHFiles.java
index 9beb6d5..b78017d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/LoadIncrementalHFiles.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mapreduce/LoadIncrementalHFiles.java
@@ -209,6 +209,10 @@ public class LoadIncrementalHFiles extends Configured implements Tool {
       byte[] family = familyDir.getName().getBytes();
       FileStatus[] hfileStatuses = fs.listStatus(familyDir);
       for (FileStatus hfileStatus : hfileStatuses) {
+        if (!hfileStatus.isFile()) {
+          LOG.warn("Skipping non-file " + hfileStatus);
+          continue;
+        }
         long length = hfileStatus.getLen();
         Path hfile = hfileStatus.getPath();
         // Skip "_", reference, HFileLink
@@ -281,10 +285,18 @@ public class LoadIncrementalHFiles extends Configured implements Tool {
         LoadQueueItem lqi = queueIter.next();
         String familyNameInHFile = Bytes.toString(lqi.family);
         if (!familyNames.contains(familyNameInHFile)) {
-          if (HFile.isHFileFormat(lqi.hfilePath.getFileSystem(getConf()), lqi.hfilePath)) {
+          boolean isValid = false;
+          try {
+            isValid = HFile.isHFileFormat(lqi.hfilePath.getFileSystem(getConf()), lqi.hfilePath);
+            if (!isValid) {
+              LOG.warn("the file " + lqi + " doesn't seems to be an hfile. skipping");
+            }
+          } catch (FileNotFoundException e) {
+            LOG.warn("the file " + lqi + " was removed");
+          }
+          if (isValid) {
             unmatchedFamilies.add(familyNameInHFile);
           } else {
-            LOG.warn("the file " + lqi + " doesn't seems to be an hfile. skipping");
             queueIter.remove();
           }
         }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
index abec268..39b6663 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestLoadIncrementalHFiles.java
@@ -308,8 +308,9 @@ public class TestLoadIncrementalHFiles {
   }
 
   /**
-   * Write a random data file in a dir with a valid family name but not part of the table families
-   * we should we able to bulkload without getting the unmatched family exception. HBASE-13037
+   * Write a random data file and a non-file in a dir with a valid family name
+   * but not part of the table families. we should we able to bulkload without
+   * getting the unmatched family exception. HBASE-13037/HBASE-13227
    */
   @Test(timeout = 60000)
   public void testNonHfileFolderWithUnmatchedFamilyName() throws Exception {
@@ -324,6 +325,7 @@ public class TestLoadIncrementalHFiles {
     final String NON_FAMILY_FOLDER = "_logs";
     Path nonFamilyDir = new Path(dir, NON_FAMILY_FOLDER);
     fs.mkdirs(nonFamilyDir);
+    fs.mkdirs(new Path(nonFamilyDir, "non-file"));
     createRandomDataFile(fs, new Path(nonFamilyDir, "012356789"), 16 * 1024);
 
     Table table = null;
-- 
1.7.0.4


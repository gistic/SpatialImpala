From ae6b6d8480f3170de6d94aaae1ca1dae512170cc Mon Sep 17 00:00:00 2001
From: zhangduo <zhangduo@wandoujia.com>
Date: Tue, 3 Mar 2015 08:14:57 +0800
Subject: [PATCH 184/226] HBASE-13136 TestSplitLogManager.testGetPreviousRecoveryMode is flakey

Signed-off-by: stack <stack@apache.org>
(cherry picked from commit 6c02361e73a2c5e86861e6a754d9f61fa9c6cb80)

Reason: Bugfix
Author: Duo Zhang
Ref: CDH-27149
---
 .../ZKSplitLogManagerCoordination.java             |   30 +++++++++++++++----
 .../apache/hadoop/hbase/zookeeper/ZKSplitLog.java  |   13 ++++++++
 2 files changed, 36 insertions(+), 7 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/coordination/ZKSplitLogManagerCoordination.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/coordination/ZKSplitLogManagerCoordination.java
index 1e02632..fc41320 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/coordination/ZKSplitLogManagerCoordination.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/coordination/ZKSplitLogManagerCoordination.java
@@ -27,13 +27,14 @@ import static org.apache.hadoop.hbase.master.SplitLogManager.TerminationStatus.S
 
 import java.io.IOException;
 import java.io.InterruptedIOException;
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
-import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.CoordinatedStateManager;
@@ -43,17 +44,17 @@ import org.apache.hadoop.hbase.Server;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.SplitLogCounters;
 import org.apache.hadoop.hbase.SplitLogTask;
+import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.coordination.ZKSplitLogManagerCoordination.TaskFinisher.Status;
 import org.apache.hadoop.hbase.exceptions.DeserializationException;
-import org.apache.hadoop.hbase.io.hfile.HFile;
 import org.apache.hadoop.hbase.master.MasterServices;
 import org.apache.hadoop.hbase.master.SplitLogManager.ResubmitDirective;
 import org.apache.hadoop.hbase.master.SplitLogManager.Task;
 import org.apache.hadoop.hbase.master.SplitLogManager.TerminationStatus;
 import org.apache.hadoop.hbase.protobuf.generated.ZooKeeperProtos.SplitLogTask.RecoveryMode;
+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.wal.DefaultWALProvider;
 import org.apache.hadoop.hbase.wal.WALSplitter;
-import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.zookeeper.ZKSplitLog;
 import org.apache.hadoop.hbase.zookeeper.ZKUtil;
 import org.apache.hadoop.hbase.zookeeper.ZooKeeperListener;
@@ -150,7 +151,7 @@ public class ZKSplitLogManagerCoordination extends ZooKeeperListener implements
       if (tasks != null) {
         int listSize = tasks.size();
         for (int i = 0; i < listSize; i++) {
-          if (!ZKSplitLog.isRescanNode(watcher, tasks.get(i))) {
+          if (!ZKSplitLog.isRescanNode(tasks.get(i))) {
             count++;
           }
         }
@@ -302,7 +303,7 @@ public class ZKSplitLogManagerCoordination extends ZooKeeperListener implements
       if (tasks != null) {
         int listSize = tasks.size();
         for (int i = 0; i < listSize; i++) {
-          if (!ZKSplitLog.isRescanNode(watcher, tasks.get(i))) {
+          if (!ZKSplitLog.isRescanNode(tasks.get(i))) {
             count++;
           }
         }
@@ -763,6 +764,21 @@ public class ZKSplitLogManagerCoordination extends ZooKeeperListener implements
     return this.recoveryMode == RecoveryMode.LOG_SPLITTING;
   }
 
+  private List<String> listSplitLogTasks() throws KeeperException {
+    List<String> taskOrRescanList = ZKUtil.listChildrenNoWatch(watcher, watcher.splitLogZNode);
+    if (taskOrRescanList == null || taskOrRescanList.isEmpty()) {
+      return Collections.<String> emptyList();
+    }
+    List<String> taskList = new ArrayList<String>();
+    for (String taskOrRescan : taskOrRescanList) {
+      // Remove rescan nodes
+      if (!ZKSplitLog.isRescanNode(taskOrRescan)) {
+        taskList.add(taskOrRescan);
+      }
+    }
+    return taskList;
+  }
+
   /**
    * This function is to set recovery mode from outstanding split log tasks from before or current
    * configuration setting
@@ -801,8 +817,8 @@ public class ZKSplitLogManagerCoordination extends ZooKeeperListener implements
       }
       if (previousRecoveryMode == RecoveryMode.UNKNOWN) {
         // Secondly check if there are outstanding split log task
-        List<String> tasks = ZKUtil.listChildrenNoWatch(watcher, watcher.splitLogZNode);
-        if (tasks != null && !tasks.isEmpty()) {
+        List<String> tasks = listSplitLogTasks();
+        if (!tasks.isEmpty()) {
           hasSplitLogTask = true;
           if (isForInitialization) {
             // during initialization, try to get recovery mode from splitlogtask
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKSplitLog.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKSplitLog.java
index 325fe0d..ac942f2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKSplitLog.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKSplitLog.java
@@ -79,6 +79,19 @@ public class ZKSplitLog {
     return ZKUtil.joinZNode(zkw.splitLogZNode, "RESCAN");
   }
 
+  /**
+   * @param name the last part in path
+   * @return whether the node name represents a rescan node
+   */
+  public static boolean isRescanNode(String name) {
+    return name.startsWith("RESCAN");
+  }
+
+  /**
+   * @param zkw
+   * @param path the absolute path, starts with '/'
+   * @return whether the path represents a rescan node
+   */
   public static boolean isRescanNode(ZooKeeperWatcher zkw, String path) {
     String prefix = getRescanNode(zkw);
     if (path.length() <= prefix.length()) {
-- 
1.7.0.4

